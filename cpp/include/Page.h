// Generated by Haxe 4.2.1
#ifndef INCLUDED_Page
#define INCLUDED_Page

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_16ea658f277e41b6_191_new)
HX_DECLARE_CLASS0(Page)



class HXCPP_CLASS_ATTRIBUTES Page_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Page_obj OBJ_;
		Page_obj();

	public:
		enum { _hx_ClassId = 0x097dfc93 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Page")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Page"); }

		inline static ::hx::ObjectPtr< Page_obj > __new() {
			::hx::ObjectPtr< Page_obj > __this = new Page_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Page_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Page_obj *__this = (Page_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Page_obj), true, "Page"));
			*(void **)__this = Page_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_16ea658f277e41b6_191_new)
HXDLIN( 191)		( ( ::Page)(__this) )->timeAdd = ((Float)0);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Page_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Page",6f,06,2b,35); }

		int length;
		::String data;
		Float timeAdd;
};


#endif /* INCLUDED_Page */ 
