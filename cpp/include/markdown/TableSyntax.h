// Generated by Haxe 4.2.1
#ifndef INCLUDED_markdown_TableSyntax
#define INCLUDED_markdown_TableSyntax

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(markdown,BlockParser)
HX_DECLARE_CLASS1(markdown,BlockSyntax)
HX_DECLARE_CLASS1(markdown,Node)
HX_DECLARE_CLASS1(markdown,TableSyntax)

namespace markdown{


class HXCPP_CLASS_ATTRIBUTES TableSyntax_obj : public  ::markdown::BlockSyntax_obj
{
	public:
		typedef  ::markdown::BlockSyntax_obj super;
		typedef TableSyntax_obj OBJ_;
		TableSyntax_obj();

	public:
		enum { _hx_ClassId = 0x19853322 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="markdown.TableSyntax")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"markdown.TableSyntax"); }
		static ::hx::ObjectPtr< TableSyntax_obj > __new();
		static ::hx::ObjectPtr< TableSyntax_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TableSyntax_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TableSyntax",f1,c4,05,93); }

		static void __boot();
		static  ::EReg TABLE_PATTERN;
		static  ::EReg CELL_PATTERN;
		 ::EReg get_pattern();

		bool get_canEndBlock();

		::Dynamic parse( ::markdown::BlockParser parser);

};

} // end namespace markdown

#endif /* INCLUDED_markdown_TableSyntax */ 
