// Generated by Haxe 4.2.1
#ifndef INCLUDED_markdown_InlineSyntax
#define INCLUDED_markdown_InlineSyntax

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(markdown,InlineParser)
HX_DECLARE_CLASS1(markdown,InlineSyntax)

namespace markdown{


class HXCPP_CLASS_ATTRIBUTES InlineSyntax_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef InlineSyntax_obj OBJ_;
		InlineSyntax_obj();

	public:
		enum { _hx_ClassId = 0x0c65d26b };

		void __construct(::String pattern);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="markdown.InlineSyntax")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"markdown.InlineSyntax"); }
		static ::hx::ObjectPtr< InlineSyntax_obj > __new(::String pattern);
		static ::hx::ObjectPtr< InlineSyntax_obj > __alloc(::hx::Ctx *_hx_ctx,::String pattern);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InlineSyntax_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InlineSyntax",bc,d5,64,e3); }

		 ::EReg pattern;
		virtual bool tryMatch( ::markdown::InlineParser parser);
		::Dynamic tryMatch_dyn();

		virtual bool onMatch( ::markdown::InlineParser parser);
		::Dynamic onMatch_dyn();

};

} // end namespace markdown

#endif /* INCLUDED_markdown_InlineSyntax */ 
