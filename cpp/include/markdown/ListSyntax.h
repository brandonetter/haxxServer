// Generated by Haxe 4.2.1
#ifndef INCLUDED_markdown_ListSyntax
#define INCLUDED_markdown_ListSyntax

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
HX_DECLARE_CLASS1(markdown,BlockParser)
HX_DECLARE_CLASS1(markdown,BlockSyntax)
HX_DECLARE_CLASS1(markdown,ListSyntax)
HX_DECLARE_CLASS1(markdown,Node)

namespace markdown{


class HXCPP_CLASS_ATTRIBUTES ListSyntax_obj : public  ::markdown::BlockSyntax_obj
{
	public:
		typedef  ::markdown::BlockSyntax_obj super;
		typedef ListSyntax_obj OBJ_;
		ListSyntax_obj();

	public:
		enum { _hx_ClassId = 0x696ad470 };

		void __construct(::String listTag);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="markdown.ListSyntax")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"markdown.ListSyntax"); }
		static ::hx::ObjectPtr< ListSyntax_obj > __new(::String listTag);
		static ::hx::ObjectPtr< ListSyntax_obj > __alloc(::hx::Ctx *_hx_ctx,::String listTag);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ListSyntax_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ListSyntax",81,b1,ab,48); }

		bool get_canEndBlock();

		::String listTag;
		::Dynamic parse( ::markdown::BlockParser parser);

};

} // end namespace markdown

#endif /* INCLUDED_markdown_ListSyntax */ 
