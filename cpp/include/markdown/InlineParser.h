// Generated by Haxe 4.2.1
#ifndef INCLUDED_markdown_InlineParser
#define INCLUDED_markdown_InlineParser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Document)
HX_DECLARE_CLASS1(markdown,InlineParser)
HX_DECLARE_CLASS1(markdown,InlineSyntax)
HX_DECLARE_CLASS1(markdown,Node)
HX_DECLARE_CLASS1(markdown,TagState)
HX_DECLARE_CLASS1(markdown,TextNode)

namespace markdown{


class HXCPP_CLASS_ATTRIBUTES InlineParser_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef InlineParser_obj OBJ_;
		InlineParser_obj();

	public:
		enum { _hx_ClassId = 0x0a59ece7 };

		void __construct(::String source, ::Document document);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="markdown.InlineParser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"markdown.InlineParser"); }
		static ::hx::ObjectPtr< InlineParser_obj > __new(::String source, ::Document document);
		static ::hx::ObjectPtr< InlineParser_obj > __alloc(::hx::Ctx *_hx_ctx,::String source, ::Document document);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InlineParser_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InlineParser",38,f0,58,e1); }

		static void __boot();
		static ::Array< ::Dynamic> defaultSyntaxes;
		::String source;
		 ::Document document;
		::Array< ::Dynamic> syntaxes;
		int pos;
		int start;
		::Array< ::Dynamic> stack;
		::Array< ::Dynamic> parse();
		::Dynamic parse_dyn();

		void writeText();
		::Dynamic writeText_dyn();

		void writeTextRange(int start,int end);
		::Dynamic writeTextRange_dyn();

		 ::markdown::TextNode createText(::String text);
		::Dynamic createText_dyn();

		void addNode(::Dynamic node);
		::Dynamic addNode_dyn();

		::String get_currentSource();
		::Dynamic get_currentSource_dyn();

		bool get_isDone();
		::Dynamic get_isDone_dyn();

		void advanceBy(int length);
		::Dynamic advanceBy_dyn();

		void consume(int length);
		::Dynamic consume_dyn();

		::String unescape(::String text);
		::Dynamic unescape_dyn();

};

} // end namespace markdown

#endif /* INCLUDED_markdown_InlineParser */ 
