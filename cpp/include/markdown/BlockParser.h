// Generated by Haxe 4.2.1
#ifndef INCLUDED_markdown_BlockParser
#define INCLUDED_markdown_BlockParser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Document)
HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(markdown,BlockParser)

namespace markdown{


class HXCPP_CLASS_ATTRIBUTES BlockParser_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BlockParser_obj OBJ_;
		BlockParser_obj();

	public:
		enum { _hx_ClassId = 0x3fcd9039 };

		void __construct(::Array< ::String > lines, ::Document document);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="markdown.BlockParser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"markdown.BlockParser"); }
		static ::hx::ObjectPtr< BlockParser_obj > __new(::Array< ::String > lines, ::Document document);
		static ::hx::ObjectPtr< BlockParser_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< ::String > lines, ::Document document);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BlockParser_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BlockParser",ec,95,86,71); }

		::Array< ::String > lines;
		 ::Document document;
		int pos;
		::String get_current();
		::Dynamic get_current_dyn();

		::String get_next();
		::Dynamic get_next_dyn();

		void advance();
		::Dynamic advance_dyn();

		bool get_isDone();
		::Dynamic get_isDone_dyn();

		bool matches( ::EReg ereg);
		::Dynamic matches_dyn();

		bool matchesNext( ::EReg ereg);
		::Dynamic matchesNext_dyn();

};

} // end namespace markdown

#endif /* INCLUDED_markdown_BlockParser */ 
