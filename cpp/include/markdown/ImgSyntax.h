// Generated by Haxe 4.2.1
#ifndef INCLUDED_markdown_ImgSyntax
#define INCLUDED_markdown_ImgSyntax

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_markdown_TagSyntax
#include <markdown/TagSyntax.h>
#endif
HX_DECLARE_CLASS1(markdown,ImgSyntax)
HX_DECLARE_CLASS1(markdown,InlineParser)
HX_DECLARE_CLASS1(markdown,InlineSyntax)
HX_DECLARE_CLASS1(markdown,Node)
HX_DECLARE_CLASS1(markdown,TagState)
HX_DECLARE_CLASS1(markdown,TagSyntax)

namespace markdown{


class HXCPP_CLASS_ATTRIBUTES ImgSyntax_obj : public  ::markdown::TagSyntax_obj
{
	public:
		typedef  ::markdown::TagSyntax_obj super;
		typedef ImgSyntax_obj OBJ_;
		ImgSyntax_obj();

	public:
		enum { _hx_ClassId = 0x3e6923b3 };

		void __construct( ::Dynamic linkResolver);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="markdown.ImgSyntax")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"markdown.ImgSyntax"); }
		static ::hx::ObjectPtr< ImgSyntax_obj > __new( ::Dynamic linkResolver);
		static ::hx::ObjectPtr< ImgSyntax_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic linkResolver);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ImgSyntax_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImgSyntax",a6,46,9d,60); }

		static void __boot();
		static ::String linkPattern;
		 ::Dynamic linkResolver;
		Dynamic linkResolver_dyn() { return linkResolver;}
		bool onMatchEnd( ::markdown::InlineParser parser, ::markdown::TagState state);

};

} // end namespace markdown

#endif /* INCLUDED_markdown_ImgSyntax */ 
