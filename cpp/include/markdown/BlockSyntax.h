// Generated by Haxe 4.2.1
#ifndef INCLUDED_markdown_BlockSyntax
#define INCLUDED_markdown_BlockSyntax

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(markdown,BlockParser)
HX_DECLARE_CLASS1(markdown,BlockSyntax)
HX_DECLARE_CLASS1(markdown,Node)

namespace markdown{


class HXCPP_CLASS_ATTRIBUTES BlockSyntax_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BlockSyntax_obj OBJ_;
		BlockSyntax_obj();

	public:
		enum { _hx_ClassId = 0x41d975bd };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="markdown.BlockSyntax")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"markdown.BlockSyntax"); }
		static ::hx::ObjectPtr< BlockSyntax_obj > __new();
		static ::hx::ObjectPtr< BlockSyntax_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BlockSyntax_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BlockSyntax",70,7b,92,73); }

		static void __boot();
		static  ::EReg RE_EMPTY;
		static  ::EReg RE_SETEXT;
		static  ::EReg RE_HEADER;
		static  ::EReg RE_BLOCKQUOTE;
		static  ::EReg RE_INDENT;
		static  ::EReg RE_CODE;
		static  ::EReg RE_HR;
		static  ::EReg RE_HTML;
		static  ::EReg RE_UL;
		static  ::EReg RE_OL;
		static ::Array< ::Dynamic> syntaxes;
		static ::Array< ::Dynamic> get_syntaxes();
		static ::Dynamic get_syntaxes_dyn();

		static bool isAtBlockEnd( ::markdown::BlockParser parser);
		static ::Dynamic isAtBlockEnd_dyn();

		virtual  ::EReg get_pattern();
		::Dynamic get_pattern_dyn();

		virtual bool get_canEndBlock();
		::Dynamic get_canEndBlock_dyn();

		virtual bool canParse( ::markdown::BlockParser parser);
		::Dynamic canParse_dyn();

		virtual ::Dynamic parse( ::markdown::BlockParser parser);
		::Dynamic parse_dyn();

		virtual ::Array< ::String > parseChildLines( ::markdown::BlockParser parser);
		::Dynamic parseChildLines_dyn();

};

} // end namespace markdown

#endif /* INCLUDED_markdown_BlockSyntax */ 
