// Generated by Haxe 4.2.1
#ifndef INCLUDED_markdown_TagSyntax
#define INCLUDED_markdown_TagSyntax

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_markdown_InlineSyntax
#include <markdown/InlineSyntax.h>
#endif
HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(markdown,InlineParser)
HX_DECLARE_CLASS1(markdown,InlineSyntax)
HX_DECLARE_CLASS1(markdown,TagState)
HX_DECLARE_CLASS1(markdown,TagSyntax)

namespace markdown{


class HXCPP_CLASS_ATTRIBUTES TagSyntax_obj : public  ::markdown::InlineSyntax_obj
{
	public:
		typedef  ::markdown::InlineSyntax_obj super;
		typedef TagSyntax_obj OBJ_;
		TagSyntax_obj();

	public:
		enum { _hx_ClassId = 0x4f005a66 };

		void __construct(::String pattern,::String tag,::String end);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="markdown.TagSyntax")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"markdown.TagSyntax"); }
		static ::hx::ObjectPtr< TagSyntax_obj > __new(::String pattern,::String tag,::String end);
		static ::hx::ObjectPtr< TagSyntax_obj > __alloc(::hx::Ctx *_hx_ctx,::String pattern,::String tag,::String end);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TagSyntax_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TagSyntax",3d,70,9f,c2); }

		 ::EReg endPattern;
		::String tag;
		bool onMatch( ::markdown::InlineParser parser);

		virtual bool onMatchEnd( ::markdown::InlineParser parser, ::markdown::TagState state);
		::Dynamic onMatchEnd_dyn();

};

} // end namespace markdown

#endif /* INCLUDED_markdown_TagSyntax */ 
