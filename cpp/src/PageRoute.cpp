// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_PageRoute
#include <PageRoute.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a8baca733c8f577d_176_new,"PageRoute","new",0x73aaaa8c,"PageRoute.new","Main.hx",176,0x087e5c05)

void PageRoute_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a8baca733c8f577d_176_new)
            	}

Dynamic PageRoute_obj::__CreateEmpty() { return new PageRoute_obj; }

void *PageRoute_obj::_hx_vtable = 0;

Dynamic PageRoute_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PageRoute_obj > _hx_result = new PageRoute_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PageRoute_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5620ce12;
}


PageRoute_obj::PageRoute_obj()
{
}

void PageRoute_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PageRoute);
	HX_MARK_MEMBER_NAME(request,"request");
	HX_MARK_MEMBER_NAME(output,"output");
	HX_MARK_END_CLASS();
}

void PageRoute_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(request,"request");
	HX_VISIT_MEMBER_NAME(output,"output");
}

::hx::Val PageRoute_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { return ::hx::Val( output ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"request") ) { return ::hx::Val( request ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PageRoute_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { output=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"request") ) { request=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PageRoute_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("request",4f,df,84,44));
	outFields->push(HX_("output",01,0f,81,0c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PageRoute_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(PageRoute_obj,request),HX_("request",4f,df,84,44)},
	{::hx::fsString,(int)offsetof(PageRoute_obj,output),HX_("output",01,0f,81,0c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PageRoute_obj_sStaticStorageInfo = 0;
#endif

static ::String PageRoute_obj_sMemberFields[] = {
	HX_("request",4f,df,84,44),
	HX_("output",01,0f,81,0c),
	::String(null()) };

::hx::Class PageRoute_obj::__mClass;

void PageRoute_obj::__register()
{
	PageRoute_obj _hx_dummy;
	PageRoute_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PageRoute",9a,b4,4f,35);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PageRoute_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PageRoute_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PageRoute_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PageRoute_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

