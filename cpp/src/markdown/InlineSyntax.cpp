// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_markdown_InlineParser
#include <markdown/InlineParser.h>
#endif
#ifndef INCLUDED_markdown_InlineSyntax
#include <markdown/InlineSyntax.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4c3942c91df0077c_196_new,"markdown.InlineSyntax","new",0x6febc10d,"markdown.InlineSyntax.new","markdown/InlineParser.hx",196,0xf7baa326)
HX_LOCAL_STACK_FRAME(_hx_pos_4c3942c91df0077c_199_tryMatch,"markdown.InlineSyntax","tryMatch",0xe649763d,"markdown.InlineSyntax.tryMatch","markdown/InlineParser.hx",199,0xf7baa326)
HX_LOCAL_STACK_FRAME(_hx_pos_4c3942c91df0077c_214_onMatch,"markdown.InlineSyntax","onMatch",0xe80332d3,"markdown.InlineSyntax.onMatch","markdown/InlineParser.hx",214,0xf7baa326)
namespace markdown{

void InlineSyntax_obj::__construct(::String pattern){
            	HX_GC_STACKFRAME(&_hx_pos_4c3942c91df0077c_196_new)
HXDLIN( 196)		this->pattern =  ::EReg_obj::__alloc( HX_CTX ,pattern,HX_("m",6d,00,00,00));
            	}

Dynamic InlineSyntax_obj::__CreateEmpty() { return new InlineSyntax_obj; }

void *InlineSyntax_obj::_hx_vtable = 0;

Dynamic InlineSyntax_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InlineSyntax_obj > _hx_result = new InlineSyntax_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool InlineSyntax_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c65d26b;
}

bool InlineSyntax_obj::tryMatch( ::markdown::InlineParser parser){
            	HX_STACKFRAME(&_hx_pos_4c3942c91df0077c_199_tryMatch)
HXLINE( 200)		bool _hx_tmp;
HXDLIN( 200)		 ::EReg _hx_tmp1 = this->pattern;
HXDLIN( 200)		if (_hx_tmp1->match(parser->get_currentSource())) {
HXLINE( 200)			_hx_tmp = ::hx::IsEq( this->pattern->matchedPos()->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic),0 );
            		}
            		else {
HXLINE( 200)			_hx_tmp = false;
            		}
HXDLIN( 200)		if (_hx_tmp) {
HXLINE( 202)			parser->writeText();
HXLINE( 204)			if (this->onMatch(parser)) {
HXLINE( 205)				parser->consume(this->pattern->matched(0).length);
            			}
HXLINE( 208)			return true;
            		}
HXLINE( 210)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InlineSyntax_obj,tryMatch,return )

bool InlineSyntax_obj::onMatch( ::markdown::InlineParser parser){
            	HX_STACKFRAME(&_hx_pos_4c3942c91df0077c_214_onMatch)
HXDLIN( 214)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InlineSyntax_obj,onMatch,return )


::hx::ObjectPtr< InlineSyntax_obj > InlineSyntax_obj::__new(::String pattern) {
	::hx::ObjectPtr< InlineSyntax_obj > __this = new InlineSyntax_obj();
	__this->__construct(pattern);
	return __this;
}

::hx::ObjectPtr< InlineSyntax_obj > InlineSyntax_obj::__alloc(::hx::Ctx *_hx_ctx,::String pattern) {
	InlineSyntax_obj *__this = (InlineSyntax_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InlineSyntax_obj), true, "markdown.InlineSyntax"));
	*(void **)__this = InlineSyntax_obj::_hx_vtable;
	__this->__construct(pattern);
	return __this;
}

InlineSyntax_obj::InlineSyntax_obj()
{
}

void InlineSyntax_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InlineSyntax);
	HX_MARK_MEMBER_NAME(pattern,"pattern");
	HX_MARK_END_CLASS();
}

void InlineSyntax_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pattern,"pattern");
}

::hx::Val InlineSyntax_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"pattern") ) { return ::hx::Val( pattern ); }
		if (HX_FIELD_EQ(inName,"onMatch") ) { return ::hx::Val( onMatch_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tryMatch") ) { return ::hx::Val( tryMatch_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val InlineSyntax_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"pattern") ) { pattern=inValue.Cast<  ::EReg >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InlineSyntax_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pattern",50,06,77,11));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InlineSyntax_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::EReg */ ,(int)offsetof(InlineSyntax_obj,pattern),HX_("pattern",50,06,77,11)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *InlineSyntax_obj_sStaticStorageInfo = 0;
#endif

static ::String InlineSyntax_obj_sMemberFields[] = {
	HX_("pattern",50,06,77,11),
	HX_("tryMatch",0a,fa,e9,66),
	HX_("onMatch",a6,e7,60,99),
	::String(null()) };

::hx::Class InlineSyntax_obj::__mClass;

void InlineSyntax_obj::__register()
{
	InlineSyntax_obj _hx_dummy;
	InlineSyntax_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.InlineSyntax",9b,36,41,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InlineSyntax_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InlineSyntax_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InlineSyntax_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InlineSyntax_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
