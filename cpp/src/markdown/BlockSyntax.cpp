// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_markdown_BlockHtmlSyntax
#include <markdown/BlockHtmlSyntax.h>
#endif
#ifndef INCLUDED_markdown_BlockParser
#include <markdown/BlockParser.h>
#endif
#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_BlockquoteSyntax
#include <markdown/BlockquoteSyntax.h>
#endif
#ifndef INCLUDED_markdown_CodeBlockSyntax
#include <markdown/CodeBlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_EmptyBlockSyntax
#include <markdown/EmptyBlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_GitHubCodeBlockSyntax
#include <markdown/GitHubCodeBlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_HeaderSyntax
#include <markdown/HeaderSyntax.h>
#endif
#ifndef INCLUDED_markdown_HorizontalRuleSyntax
#include <markdown/HorizontalRuleSyntax.h>
#endif
#ifndef INCLUDED_markdown_ListSyntax
#include <markdown/ListSyntax.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif
#ifndef INCLUDED_markdown_OrderedListSyntax
#include <markdown/OrderedListSyntax.h>
#endif
#ifndef INCLUDED_markdown_ParagraphSyntax
#include <markdown/ParagraphSyntax.h>
#endif
#ifndef INCLUDED_markdown_SetextHeaderSyntax
#include <markdown/SetextHeaderSyntax.h>
#endif
#ifndef INCLUDED_markdown_TableSyntax
#include <markdown/TableSyntax.h>
#endif
#ifndef INCLUDED_markdown_UnorderedListSyntax
#include <markdown/UnorderedListSyntax.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_316adc713c21eec9_156_new,"markdown.BlockSyntax","new",0x6c0ec8e3,"markdown.BlockSyntax.new","markdown/BlockParser.hx",156,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_164_get_pattern,"markdown.BlockSyntax","get_pattern",0x1c6d19ea,"markdown.BlockSyntax.get_pattern","markdown/BlockParser.hx",164,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_170_get_canEndBlock,"markdown.BlockSyntax","get_canEndBlock",0xe952b03c,"markdown.BlockSyntax.get_canEndBlock","markdown/BlockParser.hx",170,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_174_canParse,"markdown.BlockSyntax","canParse",0xe02b1ea0,"markdown.BlockSyntax.canParse","markdown/BlockParser.hx",174,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_178_parse,"markdown.BlockSyntax","parse",0xc821ef76,"markdown.BlockSyntax.parse","markdown/BlockParser.hx",178,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_181_parseChildLines,"markdown.BlockSyntax","parseChildLines",0xb23671d9,"markdown.BlockSyntax.parseChildLines","markdown/BlockParser.hx",181,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_132_get_syntaxes,"markdown.BlockSyntax","get_syntaxes",0xebdf8cb7,"markdown.BlockSyntax.get_syntaxes","markdown/BlockParser.hx",132,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_146_isAtBlockEnd,"markdown.BlockSyntax","isAtBlockEnd",0x0e421848,"markdown.BlockSyntax.isAtBlockEnd","markdown/BlockParser.hx",146,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_73_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",73,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_78_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",78,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_83_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",83,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_88_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",88,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_93_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",93,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_98_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",98,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_105_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",105,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_111_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",111,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_118_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",118,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_316adc713c21eec9_124_boot,"markdown.BlockSyntax","boot",0x18f9fe4f,"markdown.BlockSyntax.boot","markdown/BlockParser.hx",124,0x037f5eb2)
namespace markdown{

void BlockSyntax_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_316adc713c21eec9_156_new)
            	}

Dynamic BlockSyntax_obj::__CreateEmpty() { return new BlockSyntax_obj; }

void *BlockSyntax_obj::_hx_vtable = 0;

Dynamic BlockSyntax_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BlockSyntax_obj > _hx_result = new BlockSyntax_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BlockSyntax_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x41d975bd;
}

 ::EReg BlockSyntax_obj::get_pattern(){
            	HX_STACKFRAME(&_hx_pos_316adc713c21eec9_164_get_pattern)
HXDLIN( 164)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BlockSyntax_obj,get_pattern,return )

bool BlockSyntax_obj::get_canEndBlock(){
            	HX_STACKFRAME(&_hx_pos_316adc713c21eec9_170_get_canEndBlock)
HXDLIN( 170)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BlockSyntax_obj,get_canEndBlock,return )

bool BlockSyntax_obj::canParse( ::markdown::BlockParser parser){
            	HX_STACKFRAME(&_hx_pos_316adc713c21eec9_174_canParse)
HXDLIN( 174)		 ::EReg _hx_tmp = this->get_pattern();
HXDLIN( 174)		return _hx_tmp->match(parser->lines->__get(parser->pos));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BlockSyntax_obj,canParse,return )

::Dynamic BlockSyntax_obj::parse( ::markdown::BlockParser parser){
            	HX_STACKFRAME(&_hx_pos_316adc713c21eec9_178_parse)
HXDLIN( 178)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BlockSyntax_obj,parse,return )

::Array< ::String > BlockSyntax_obj::parseChildLines( ::markdown::BlockParser parser){
            	HX_STACKFRAME(&_hx_pos_316adc713c21eec9_181_parseChildLines)
HXLINE( 182)		::Array< ::String > childLines = ::Array_obj< ::String >::__new(0);
HXLINE( 184)		while((parser->pos < parser->lines->length)){
HXLINE( 185)			 ::EReg _hx_tmp = this->get_pattern();
HXDLIN( 185)			if (!(_hx_tmp->match(parser->lines->__get(parser->pos)))) {
HXLINE( 186)				goto _hx_goto_5;
            			}
HXLINE( 187)			childLines->push(this->get_pattern()->matched(1));
HXLINE( 188)			parser->advance();
            		}
            		_hx_goto_5:;
HXLINE( 191)		return childLines;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BlockSyntax_obj,parseChildLines,return )

 ::EReg BlockSyntax_obj::RE_EMPTY;

 ::EReg BlockSyntax_obj::RE_SETEXT;

 ::EReg BlockSyntax_obj::RE_HEADER;

 ::EReg BlockSyntax_obj::RE_BLOCKQUOTE;

 ::EReg BlockSyntax_obj::RE_INDENT;

 ::EReg BlockSyntax_obj::RE_CODE;

 ::EReg BlockSyntax_obj::RE_HR;

 ::EReg BlockSyntax_obj::RE_HTML;

 ::EReg BlockSyntax_obj::RE_UL;

 ::EReg BlockSyntax_obj::RE_OL;

::Array< ::Dynamic> BlockSyntax_obj::syntaxes;

::Array< ::Dynamic> BlockSyntax_obj::get_syntaxes(){
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_132_get_syntaxes)
HXLINE( 133)		if (::hx::IsNull( ::markdown::BlockSyntax_obj::syntaxes )) {
HXLINE( 135)			 ::markdown::EmptyBlockSyntax _hx_tmp =  ::markdown::EmptyBlockSyntax_obj::__alloc( HX_CTX );
HXDLIN( 135)			 ::markdown::BlockHtmlSyntax _hx_tmp1 =  ::markdown::BlockHtmlSyntax_obj::__alloc( HX_CTX );
HXDLIN( 135)			 ::markdown::SetextHeaderSyntax _hx_tmp2 =  ::markdown::SetextHeaderSyntax_obj::__alloc( HX_CTX );
HXDLIN( 135)			 ::markdown::HeaderSyntax _hx_tmp3 =  ::markdown::HeaderSyntax_obj::__alloc( HX_CTX );
HXDLIN( 135)			 ::markdown::CodeBlockSyntax _hx_tmp4 =  ::markdown::CodeBlockSyntax_obj::__alloc( HX_CTX );
HXLINE( 136)			 ::markdown::GitHubCodeBlockSyntax _hx_tmp5 =  ::markdown::GitHubCodeBlockSyntax_obj::__alloc( HX_CTX );
HXDLIN( 136)			 ::markdown::BlockquoteSyntax _hx_tmp6 =  ::markdown::BlockquoteSyntax_obj::__alloc( HX_CTX );
HXDLIN( 136)			 ::markdown::HorizontalRuleSyntax _hx_tmp7 =  ::markdown::HorizontalRuleSyntax_obj::__alloc( HX_CTX );
HXDLIN( 136)			 ::markdown::UnorderedListSyntax _hx_tmp8 =  ::markdown::UnorderedListSyntax_obj::__alloc( HX_CTX );
HXDLIN( 136)			 ::markdown::OrderedListSyntax _hx_tmp9 =  ::markdown::OrderedListSyntax_obj::__alloc( HX_CTX );
HXLINE( 137)			 ::markdown::TableSyntax _hx_tmp10 =  ::markdown::TableSyntax_obj::__alloc( HX_CTX );
HXLINE( 134)			::markdown::BlockSyntax_obj::syntaxes = ::Array_obj< ::Dynamic>::__new(12)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4,_hx_tmp4)->init(5,_hx_tmp5)->init(6,_hx_tmp6)->init(7,_hx_tmp7)->init(8,_hx_tmp8)->init(9,_hx_tmp9)->init(10,_hx_tmp10)->init(11, ::markdown::ParagraphSyntax_obj::__alloc( HX_CTX ));
            		}
HXLINE( 139)		return ::markdown::BlockSyntax_obj::syntaxes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BlockSyntax_obj,get_syntaxes,return )

bool BlockSyntax_obj::isAtBlockEnd( ::markdown::BlockParser parser){
            	HX_STACKFRAME(&_hx_pos_316adc713c21eec9_146_isAtBlockEnd)
HXLINE( 147)		if ((parser->pos >= parser->lines->length)) {
HXLINE( 148)			return true;
            		}
HXLINE( 149)		{
HXLINE( 149)			int _g = 0;
HXDLIN( 149)			::Array< ::Dynamic> _g1 = ::markdown::BlockSyntax_obj::get_syntaxes();
HXDLIN( 149)			while((_g < _g1->length)){
HXLINE( 149)				 ::markdown::BlockSyntax syntax = _g1->__get(_g).StaticCast<  ::markdown::BlockSyntax >();
HXDLIN( 149)				_g = (_g + 1);
HXLINE( 150)				bool _hx_tmp;
HXDLIN( 150)				if (syntax->canParse(parser)) {
HXLINE( 150)					_hx_tmp = syntax->get_canEndBlock();
            				}
            				else {
HXLINE( 150)					_hx_tmp = false;
            				}
HXDLIN( 150)				if (_hx_tmp) {
HXLINE( 151)					return true;
            				}
            			}
            		}
HXLINE( 153)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BlockSyntax_obj,isAtBlockEnd,return )


::hx::ObjectPtr< BlockSyntax_obj > BlockSyntax_obj::__new() {
	::hx::ObjectPtr< BlockSyntax_obj > __this = new BlockSyntax_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BlockSyntax_obj > BlockSyntax_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BlockSyntax_obj *__this = (BlockSyntax_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BlockSyntax_obj), false, "markdown.BlockSyntax"));
	*(void **)__this = BlockSyntax_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BlockSyntax_obj::BlockSyntax_obj()
{
}

::hx::Val BlockSyntax_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pattern") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_pattern() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canParse") ) { return ::hx::Val( canParse_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_pattern") ) { return ::hx::Val( get_pattern_dyn() ); }
		if (HX_FIELD_EQ(inName,"canEndBlock") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_canEndBlock() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_canEndBlock") ) { return ::hx::Val( get_canEndBlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseChildLines") ) { return ::hx::Val( parseChildLines_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BlockSyntax_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"RE_HR") ) { outValue = ( RE_HR ); return true; }
		if (HX_FIELD_EQ(inName,"RE_UL") ) { outValue = ( RE_UL ); return true; }
		if (HX_FIELD_EQ(inName,"RE_OL") ) { outValue = ( RE_OL ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"RE_CODE") ) { outValue = ( RE_CODE ); return true; }
		if (HX_FIELD_EQ(inName,"RE_HTML") ) { outValue = ( RE_HTML ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"RE_EMPTY") ) { outValue = ( RE_EMPTY ); return true; }
		if (HX_FIELD_EQ(inName,"syntaxes") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_syntaxes() : syntaxes ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"RE_SETEXT") ) { outValue = ( RE_SETEXT ); return true; }
		if (HX_FIELD_EQ(inName,"RE_HEADER") ) { outValue = ( RE_HEADER ); return true; }
		if (HX_FIELD_EQ(inName,"RE_INDENT") ) { outValue = ( RE_INDENT ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_syntaxes") ) { outValue = get_syntaxes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAtBlockEnd") ) { outValue = isAtBlockEnd_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"RE_BLOCKQUOTE") ) { outValue = ( RE_BLOCKQUOTE ); return true; }
	}
	return false;
}

bool BlockSyntax_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"RE_HR") ) { RE_HR=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"RE_UL") ) { RE_UL=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"RE_OL") ) { RE_OL=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"RE_CODE") ) { RE_CODE=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"RE_HTML") ) { RE_HTML=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"RE_EMPTY") ) { RE_EMPTY=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"syntaxes") ) { syntaxes=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"RE_SETEXT") ) { RE_SETEXT=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"RE_HEADER") ) { RE_HEADER=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"RE_INDENT") ) { RE_INDENT=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"RE_BLOCKQUOTE") ) { RE_BLOCKQUOTE=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

void BlockSyntax_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pattern",50,06,77,11));
	outFields->push(HX_("canEndBlock",a2,c7,a1,e2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BlockSyntax_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo BlockSyntax_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_EMPTY,HX_("RE_EMPTY",a1,49,21,71)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_SETEXT,HX_("RE_SETEXT",8b,04,63,8c)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_HEADER,HX_("RE_HEADER",d9,2b,e6,19)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_BLOCKQUOTE,HX_("RE_BLOCKQUOTE",1b,57,fc,76)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_INDENT,HX_("RE_INDENT",b8,2e,d9,b0)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_CODE,HX_("RE_CODE",79,84,16,c8)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_HR,HX_("RE_HR",56,9f,bf,64)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_HTML,HX_("RE_HTML",b7,68,68,cb)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_UL,HX_("RE_UL",a3,aa,bf,64)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BlockSyntax_obj::RE_OL,HX_("RE_OL",69,a5,bf,64)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &BlockSyntax_obj::syntaxes,HX_("syntaxes",91,79,84,5f)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BlockSyntax_obj_sMemberFields[] = {
	HX_("get_pattern",67,66,71,97),
	HX_("get_canEndBlock",39,7f,83,a3),
	HX_("canParse",03,d2,e8,2b),
	HX_("parse",33,90,55,bd),
	HX_("parseChildLines",d6,40,67,6c),
	::String(null()) };

static void BlockSyntax_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_EMPTY,"RE_EMPTY");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_SETEXT,"RE_SETEXT");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_HEADER,"RE_HEADER");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_BLOCKQUOTE,"RE_BLOCKQUOTE");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_INDENT,"RE_INDENT");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_CODE,"RE_CODE");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_HR,"RE_HR");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_HTML,"RE_HTML");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_UL,"RE_UL");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::RE_OL,"RE_OL");
	HX_MARK_MEMBER_NAME(BlockSyntax_obj::syntaxes,"syntaxes");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BlockSyntax_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_EMPTY,"RE_EMPTY");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_SETEXT,"RE_SETEXT");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_HEADER,"RE_HEADER");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_BLOCKQUOTE,"RE_BLOCKQUOTE");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_INDENT,"RE_INDENT");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_CODE,"RE_CODE");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_HR,"RE_HR");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_HTML,"RE_HTML");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_UL,"RE_UL");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::RE_OL,"RE_OL");
	HX_VISIT_MEMBER_NAME(BlockSyntax_obj::syntaxes,"syntaxes");
};

#endif

::hx::Class BlockSyntax_obj::__mClass;

static ::String BlockSyntax_obj_sStaticFields[] = {
	HX_("RE_EMPTY",a1,49,21,71),
	HX_("RE_SETEXT",8b,04,63,8c),
	HX_("RE_HEADER",d9,2b,e6,19),
	HX_("RE_BLOCKQUOTE",1b,57,fc,76),
	HX_("RE_INDENT",b8,2e,d9,b0),
	HX_("RE_CODE",79,84,16,c8),
	HX_("RE_HR",56,9f,bf,64),
	HX_("RE_HTML",b7,68,68,cb),
	HX_("RE_UL",a3,aa,bf,64),
	HX_("RE_OL",69,a5,bf,64),
	HX_("syntaxes",91,79,84,5f),
	HX_("get_syntaxes",9a,2d,9e,14),
	HX_("isAtBlockEnd",2b,b9,00,37),
	::String(null())
};

void BlockSyntax_obj::__register()
{
	BlockSyntax_obj _hx_dummy;
	BlockSyntax_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.BlockSyntax",71,1b,62,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BlockSyntax_obj::__GetStatic;
	__mClass->mSetStaticField = &BlockSyntax_obj::__SetStatic;
	__mClass->mMarkFunc = BlockSyntax_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BlockSyntax_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BlockSyntax_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BlockSyntax_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BlockSyntax_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlockSyntax_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlockSyntax_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BlockSyntax_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_73_boot)
HXDLIN(  73)		RE_EMPTY =  ::EReg_obj::__alloc( HX_CTX ,HX_("^([ \\t]*)$",0f,2c,97,e9),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_78_boot)
HXDLIN(  78)		RE_SETEXT =  ::EReg_obj::__alloc( HX_CTX ,HX_("^((=+)|(-+))$",9d,ee,f6,96),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_83_boot)
HXDLIN(  83)		RE_HEADER =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(#{1,6})(.*?)( +#* *)?$",53,89,e3,38),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_88_boot)
HXDLIN(  88)		RE_BLOCKQUOTE =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[ ]{0,3}>[ ]?(.*)$",a1,3a,03,5e),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_93_boot)
HXDLIN(  93)		RE_INDENT =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(?:    |\t)(.*)$",68,81,5c,92),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_98_boot)
HXDLIN(  98)		RE_CODE =  ::EReg_obj::__alloc( HX_CTX ,HX_("^```(\\w*)\\s*$",51,f5,b1,2f),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_105_boot)
HXDLIN( 105)		RE_HR =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\\*+[ ]{0,2}){3,})$",5f,d2,a4,29),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_111_boot)
HXDLIN( 111)		RE_HTML =  ::EReg_obj::__alloc( HX_CTX ,HX_("^<[ ]*\\w+[ >]",44,39,8d,66),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_118_boot)
HXDLIN( 118)		RE_UL =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[ ]{0,3}[*+-][ \\t]+(.*)$",af,20,99,07),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_316adc713c21eec9_124_boot)
HXDLIN( 124)		RE_OL =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[ ]{0,3}\\d+\\.[ \\t]+(.*)$",06,66,fd,4b),HX_("",00,00,00,00));
            	}
}

} // end namespace markdown
