// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif
#ifndef INCLUDED_markdown_NodeVisitor
#include <markdown/NodeVisitor.h>
#endif
#ifndef INCLUDED_markdown_TextNode
#include <markdown/TextNode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5bc956dbfd2def2b_80_new,"markdown.TextNode","new",0xb0c9fec0,"markdown.TextNode.new","markdown/AST.hx",80,0xb8299f3c)
HX_LOCAL_STACK_FRAME(_hx_pos_5bc956dbfd2def2b_83_accept,"markdown.TextNode","accept",0x2f95a0a8,"markdown.TextNode.accept","markdown/AST.hx",83,0xb8299f3c)
namespace markdown{

void TextNode_obj::__construct(::String text){
            	HX_STACKFRAME(&_hx_pos_5bc956dbfd2def2b_80_new)
HXDLIN(  80)		this->text = text;
            	}

Dynamic TextNode_obj::__CreateEmpty() { return new TextNode_obj; }

void *TextNode_obj::_hx_vtable = 0;

Dynamic TextNode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TextNode_obj > _hx_result = new TextNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e52529e;
}

static ::markdown::Node_obj _hx_markdown_TextNode__hx_markdown_Node= {
	( void (::hx::Object::*)(::Dynamic))&::markdown::TextNode_obj::accept,
};

void *TextNode_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4834e911: return &_hx_markdown_TextNode__hx_markdown_Node;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void TextNode_obj::accept(::Dynamic visitor){
            	HX_STACKFRAME(&_hx_pos_5bc956dbfd2def2b_83_accept)
HXDLIN(  83)		::markdown::NodeVisitor_obj::visitText(visitor,::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextNode_obj,accept,(void))


::hx::ObjectPtr< TextNode_obj > TextNode_obj::__new(::String text) {
	::hx::ObjectPtr< TextNode_obj > __this = new TextNode_obj();
	__this->__construct(text);
	return __this;
}

::hx::ObjectPtr< TextNode_obj > TextNode_obj::__alloc(::hx::Ctx *_hx_ctx,::String text) {
	TextNode_obj *__this = (TextNode_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextNode_obj), true, "markdown.TextNode"));
	*(void **)__this = TextNode_obj::_hx_vtable;
	__this->__construct(text);
	return __this;
}

TextNode_obj::TextNode_obj()
{
}

void TextNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextNode);
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_END_CLASS();
}

void TextNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(text,"text");
}

::hx::Val TextNode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"accept") ) { return ::hx::Val( accept_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TextNode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("text",ad,cc,f9,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TextNode_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(TextNode_obj,text),HX_("text",ad,cc,f9,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TextNode_obj_sStaticStorageInfo = 0;
#endif

static ::String TextNode_obj_sMemberFields[] = {
	HX_("text",ad,cc,f9,4c),
	HX_("accept",08,93,06,0b),
	::String(null()) };

::hx::Class TextNode_obj::__mClass;

void TextNode_obj::__register()
{
	TextNode_obj _hx_dummy;
	TextNode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.TextNode",ce,de,3b,47);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TextNode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TextNode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextNode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
