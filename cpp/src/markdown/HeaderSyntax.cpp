// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_Document
#include <Document.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_markdown_BlockParser
#include <markdown/BlockParser.h>
#endif
#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_ElementNode
#include <markdown/ElementNode.h>
#endif
#ifndef INCLUDED_markdown_HeaderSyntax
#include <markdown/HeaderSyntax.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4a1b0edb982cb37a_242_new,"markdown.HeaderSyntax","new",0xed3e8941,"markdown.HeaderSyntax.new","markdown/BlockParser.hx",242,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_4a1b0edb982cb37a_246_get_pattern,"markdown.HeaderSyntax","get_pattern",0x68016848,"markdown.HeaderSyntax.get_pattern","markdown/BlockParser.hx",246,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_4a1b0edb982cb37a_249_parse,"markdown.HeaderSyntax","parse",0xc5090354,"markdown.HeaderSyntax.parse","markdown/BlockParser.hx",249,0x037f5eb2)
namespace markdown{

void HeaderSyntax_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4a1b0edb982cb37a_242_new)
HXDLIN( 242)		super::__construct();
            	}

Dynamic HeaderSyntax_obj::__CreateEmpty() { return new HeaderSyntax_obj; }

void *HeaderSyntax_obj::_hx_vtable = 0;

Dynamic HeaderSyntax_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HeaderSyntax_obj > _hx_result = new HeaderSyntax_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HeaderSyntax_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x08618967) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x08618967;
	} else {
		return inClassId==(int)0x41d975bd;
	}
}

 ::EReg HeaderSyntax_obj::get_pattern(){
            	HX_STACKFRAME(&_hx_pos_4a1b0edb982cb37a_246_get_pattern)
HXDLIN( 246)		return ::markdown::BlockSyntax_obj::RE_HEADER;
            	}


::Dynamic HeaderSyntax_obj::parse( ::markdown::BlockParser parser){
            	HX_GC_STACKFRAME(&_hx_pos_4a1b0edb982cb37a_249_parse)
HXLINE( 250)		 ::EReg _hx_tmp = this->get_pattern();
HXDLIN( 250)		_hx_tmp->match(parser->lines->__get(parser->pos));
HXLINE( 251)		parser->advance();
HXLINE( 252)		int level = this->get_pattern()->matched(1).length;
HXLINE( 253)		 ::Document parser1 = parser->document;
HXDLIN( 253)		::Array< ::Dynamic> contents = parser1->parseInline(::StringTools_obj::trim(this->get_pattern()->matched(2)));
HXLINE( 254)		return  ::markdown::ElementNode_obj::__alloc( HX_CTX ,(HX_("h",68,00,00,00) + level),contents);
            	}



::hx::ObjectPtr< HeaderSyntax_obj > HeaderSyntax_obj::__new() {
	::hx::ObjectPtr< HeaderSyntax_obj > __this = new HeaderSyntax_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< HeaderSyntax_obj > HeaderSyntax_obj::__alloc(::hx::Ctx *_hx_ctx) {
	HeaderSyntax_obj *__this = (HeaderSyntax_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HeaderSyntax_obj), false, "markdown.HeaderSyntax"));
	*(void **)__this = HeaderSyntax_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

HeaderSyntax_obj::HeaderSyntax_obj()
{
}

::hx::Val HeaderSyntax_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_pattern") ) { return ::hx::Val( get_pattern_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *HeaderSyntax_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *HeaderSyntax_obj_sStaticStorageInfo = 0;
#endif

static ::String HeaderSyntax_obj_sMemberFields[] = {
	HX_("get_pattern",67,66,71,97),
	HX_("parse",33,90,55,bd),
	::String(null()) };

::hx::Class HeaderSyntax_obj::__mClass;

void HeaderSyntax_obj::__register()
{
	HeaderSyntax_obj _hx_dummy;
	HeaderSyntax_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.HeaderSyntax",cf,d4,96,a8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HeaderSyntax_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HeaderSyntax_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HeaderSyntax_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HeaderSyntax_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
