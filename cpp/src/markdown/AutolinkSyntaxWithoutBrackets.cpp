// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_markdown_AutolinkSyntaxWithoutBrackets
#include <markdown/AutolinkSyntaxWithoutBrackets.h>
#endif
#ifndef INCLUDED_markdown_ElementNode
#include <markdown/ElementNode.h>
#endif
#ifndef INCLUDED_markdown_InlineParser
#include <markdown/InlineParser.h>
#endif
#ifndef INCLUDED_markdown_InlineSyntax
#include <markdown/InlineSyntax.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e7e9dc560010be29_268_new,"markdown.AutolinkSyntaxWithoutBrackets","new",0xed7a4ffa,"markdown.AutolinkSyntaxWithoutBrackets.new","markdown/InlineParser.hx",268,0xf7baa326)
HX_LOCAL_STACK_FRAME(_hx_pos_e7e9dc560010be29_272_tryMatch,"markdown.AutolinkSyntaxWithoutBrackets","tryMatch",0xf5ccac30,"markdown.AutolinkSyntaxWithoutBrackets.tryMatch","markdown/InlineParser.hx",272,0xf7baa326)
HX_LOCAL_STACK_FRAME(_hx_pos_e7e9dc560010be29_275_onMatch,"markdown.AutolinkSyntaxWithoutBrackets","onMatch",0xa0e83c40,"markdown.AutolinkSyntaxWithoutBrackets.onMatch","markdown/InlineParser.hx",275,0xf7baa326)
namespace markdown{

void AutolinkSyntaxWithoutBrackets_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e7e9dc560010be29_268_new)
HXDLIN( 268)		super::__construct(HX_("\\b((http|https|ftp)://[^\\s]*)\\b",74,7a,1d,ab));
            	}

Dynamic AutolinkSyntaxWithoutBrackets_obj::__CreateEmpty() { return new AutolinkSyntaxWithoutBrackets_obj; }

void *AutolinkSyntaxWithoutBrackets_obj::_hx_vtable = 0;

Dynamic AutolinkSyntaxWithoutBrackets_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AutolinkSyntaxWithoutBrackets_obj > _hx_result = new AutolinkSyntaxWithoutBrackets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AutolinkSyntaxWithoutBrackets_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c65d26b) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c65d26b;
	} else {
		return inClassId==(int)0x6517a538;
	}
}

bool AutolinkSyntaxWithoutBrackets_obj::tryMatch( ::markdown::InlineParser parser){
            	HX_STACKFRAME(&_hx_pos_e7e9dc560010be29_272_tryMatch)
HXDLIN( 272)		return this->super::tryMatch(parser);
            	}


bool AutolinkSyntaxWithoutBrackets_obj::onMatch( ::markdown::InlineParser parser){
            	HX_STACKFRAME(&_hx_pos_e7e9dc560010be29_275_onMatch)
HXLINE( 276)		::String url = this->pattern->matched(1);
HXLINE( 278)		 ::markdown::ElementNode anchor = ::markdown::ElementNode_obj::text(HX_("a",61,00,00,00),::StringTools_obj::htmlEscape(url,null()));
HXLINE( 279)		anchor->attributes->set(HX_("href",eb,09,15,45),url);
HXLINE( 280)		parser->addNode(anchor);
HXLINE( 282)		return true;
            	}



::hx::ObjectPtr< AutolinkSyntaxWithoutBrackets_obj > AutolinkSyntaxWithoutBrackets_obj::__new() {
	::hx::ObjectPtr< AutolinkSyntaxWithoutBrackets_obj > __this = new AutolinkSyntaxWithoutBrackets_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AutolinkSyntaxWithoutBrackets_obj > AutolinkSyntaxWithoutBrackets_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AutolinkSyntaxWithoutBrackets_obj *__this = (AutolinkSyntaxWithoutBrackets_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AutolinkSyntaxWithoutBrackets_obj), true, "markdown.AutolinkSyntaxWithoutBrackets"));
	*(void **)__this = AutolinkSyntaxWithoutBrackets_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AutolinkSyntaxWithoutBrackets_obj::AutolinkSyntaxWithoutBrackets_obj()
{
}

::hx::Val AutolinkSyntaxWithoutBrackets_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onMatch") ) { return ::hx::Val( onMatch_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tryMatch") ) { return ::hx::Val( tryMatch_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AutolinkSyntaxWithoutBrackets_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *AutolinkSyntaxWithoutBrackets_obj_sStaticStorageInfo = 0;
#endif

static ::String AutolinkSyntaxWithoutBrackets_obj_sMemberFields[] = {
	HX_("tryMatch",0a,fa,e9,66),
	HX_("onMatch",a6,e7,60,99),
	::String(null()) };

::hx::Class AutolinkSyntaxWithoutBrackets_obj::__mClass;

void AutolinkSyntaxWithoutBrackets_obj::__register()
{
	AutolinkSyntaxWithoutBrackets_obj _hx_dummy;
	AutolinkSyntaxWithoutBrackets_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.AutolinkSyntaxWithoutBrackets",08,8b,e8,ec);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AutolinkSyntaxWithoutBrackets_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AutolinkSyntaxWithoutBrackets_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AutolinkSyntaxWithoutBrackets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AutolinkSyntaxWithoutBrackets_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
