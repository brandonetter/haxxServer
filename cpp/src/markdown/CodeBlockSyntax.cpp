// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_markdown_BlockParser
#include <markdown/BlockParser.h>
#endif
#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_CodeBlockSyntax
#include <markdown/CodeBlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_ElementNode
#include <markdown/ElementNode.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7a8a42ddcbb8c170_301_new,"markdown.CodeBlockSyntax","new",0x4ce8beb6,"markdown.CodeBlockSyntax.new","markdown/BlockParser.hx",301,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a8a42ddcbb8c170_303_get_pattern,"markdown.CodeBlockSyntax","get_pattern",0xe4bd9abd,"markdown.CodeBlockSyntax.get_pattern","markdown/BlockParser.hx",303,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a8a42ddcbb8c170_306_parseChildLines,"markdown.CodeBlockSyntax","parseChildLines",0xaa53582c,"markdown.CodeBlockSyntax.parseChildLines","markdown/BlockParser.hx",306,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_7a8a42ddcbb8c170_332_parse,"markdown.CodeBlockSyntax","parse",0x0bc34009,"markdown.CodeBlockSyntax.parse","markdown/BlockParser.hx",332,0x037f5eb2)
namespace markdown{

void CodeBlockSyntax_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7a8a42ddcbb8c170_301_new)
HXDLIN( 301)		super::__construct();
            	}

Dynamic CodeBlockSyntax_obj::__CreateEmpty() { return new CodeBlockSyntax_obj; }

void *CodeBlockSyntax_obj::_hx_vtable = 0;

Dynamic CodeBlockSyntax_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CodeBlockSyntax_obj > _hx_result = new CodeBlockSyntax_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CodeBlockSyntax_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x41d975bd) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x41d975bd;
	} else {
		return inClassId==(int)0x6628262c;
	}
}

 ::EReg CodeBlockSyntax_obj::get_pattern(){
            	HX_STACKFRAME(&_hx_pos_7a8a42ddcbb8c170_303_get_pattern)
HXDLIN( 303)		return ::markdown::BlockSyntax_obj::RE_INDENT;
            	}


::Array< ::String > CodeBlockSyntax_obj::parseChildLines( ::markdown::BlockParser parser){
            	HX_STACKFRAME(&_hx_pos_7a8a42ddcbb8c170_306_parseChildLines)
HXLINE( 307)		::Array< ::String > childLines = ::Array_obj< ::String >::__new(0);
HXLINE( 309)		while((parser->pos < parser->lines->length)){
HXLINE( 310)			 ::EReg _hx_tmp = this->get_pattern();
HXDLIN( 310)			if (_hx_tmp->match(parser->lines->__get(parser->pos))) {
HXLINE( 311)				childLines->push(this->get_pattern()->matched(1));
HXLINE( 312)				parser->advance();
            			}
            			else {
HXLINE( 316)				bool nextMatch;
HXDLIN( 316)				if (::hx::IsNotNull( parser->get_next() )) {
HXLINE( 316)					 ::EReg nextMatch1 = this->get_pattern();
HXDLIN( 316)					nextMatch = nextMatch1->match(parser->get_next());
            				}
            				else {
HXLINE( 316)					nextMatch = false;
            				}
HXLINE( 318)				bool _hx_tmp;
HXDLIN( 318)				if ((::StringTools_obj::trim(parser->lines->__get(parser->pos)) == HX_("",00,00,00,00))) {
HXLINE( 318)					_hx_tmp = nextMatch;
            				}
            				else {
HXLINE( 318)					_hx_tmp = false;
            				}
HXDLIN( 318)				if (_hx_tmp) {
HXLINE( 319)					childLines->push(HX_("",00,00,00,00));
HXLINE( 320)					childLines->push(this->get_pattern()->matched(1));
HXLINE( 321)					parser->advance();
HXLINE( 322)					parser->advance();
            				}
            				else {
HXLINE( 324)					goto _hx_goto_2;
            				}
            			}
            		}
            		_hx_goto_2:;
HXLINE( 329)		return childLines;
            	}


::Dynamic CodeBlockSyntax_obj::parse( ::markdown::BlockParser parser){
            	HX_GC_STACKFRAME(&_hx_pos_7a8a42ddcbb8c170_332_parse)
HXLINE( 333)		::Array< ::String > childLines = this->parseChildLines(parser);
HXLINE( 336)		childLines->push(HX_("",00,00,00,00));
HXLINE( 339)		::String escaped = ::StringTools_obj::htmlEscape(childLines->join(HX_("\n",0a,00,00,00)),null());
HXLINE( 341)		return  ::markdown::ElementNode_obj::__alloc( HX_CTX ,HX_("pre",23,60,55,00),::Array_obj< ::Dynamic>::__new(1)->init(0,::markdown::ElementNode_obj::text(HX_("code",2d,b1,c4,41),escaped)));
            	}



::hx::ObjectPtr< CodeBlockSyntax_obj > CodeBlockSyntax_obj::__new() {
	::hx::ObjectPtr< CodeBlockSyntax_obj > __this = new CodeBlockSyntax_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CodeBlockSyntax_obj > CodeBlockSyntax_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CodeBlockSyntax_obj *__this = (CodeBlockSyntax_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CodeBlockSyntax_obj), false, "markdown.CodeBlockSyntax"));
	*(void **)__this = CodeBlockSyntax_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CodeBlockSyntax_obj::CodeBlockSyntax_obj()
{
}

::hx::Val CodeBlockSyntax_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_pattern") ) { return ::hx::Val( get_pattern_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"parseChildLines") ) { return ::hx::Val( parseChildLines_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CodeBlockSyntax_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CodeBlockSyntax_obj_sStaticStorageInfo = 0;
#endif

static ::String CodeBlockSyntax_obj_sMemberFields[] = {
	HX_("get_pattern",67,66,71,97),
	HX_("parseChildLines",d6,40,67,6c),
	HX_("parse",33,90,55,bd),
	::String(null()) };

::hx::Class CodeBlockSyntax_obj::__mClass;

void CodeBlockSyntax_obj::__register()
{
	CodeBlockSyntax_obj _hx_dummy;
	CodeBlockSyntax_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.CodeBlockSyntax",c4,eb,d1,ec);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CodeBlockSyntax_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CodeBlockSyntax_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CodeBlockSyntax_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CodeBlockSyntax_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
