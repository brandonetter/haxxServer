// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_Document
#include <Document.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_markdown_BlockParser
#include <markdown/BlockParser.h>
#endif
#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_ElementNode
#include <markdown/ElementNode.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif
#ifndef INCLUDED_markdown_SetextHeaderSyntax
#include <markdown/SetextHeaderSyntax.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_de13594e7572dc68_216_new,"markdown.SetextHeaderSyntax","new",0xdd42dee0,"markdown.SetextHeaderSyntax.new","markdown/BlockParser.hx",216,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_de13594e7572dc68_222_canParse,"markdown.SetextHeaderSyntax","canParse",0x39553383,"markdown.SetextHeaderSyntax.canParse","markdown/BlockParser.hx",222,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_de13594e7572dc68_225_parse,"markdown.SetextHeaderSyntax","parse",0xff053eb3,"markdown.SetextHeaderSyntax.parse","markdown/BlockParser.hx",225,0x037f5eb2)
namespace markdown{

void SetextHeaderSyntax_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_de13594e7572dc68_216_new)
HXDLIN( 216)		super::__construct();
            	}

Dynamic SetextHeaderSyntax_obj::__CreateEmpty() { return new SetextHeaderSyntax_obj; }

void *SetextHeaderSyntax_obj::_hx_vtable = 0;

Dynamic SetextHeaderSyntax_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SetextHeaderSyntax_obj > _hx_result = new SetextHeaderSyntax_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SetextHeaderSyntax_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1d026586) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1d026586;
	} else {
		return inClassId==(int)0x41d975bd;
	}
}

bool SetextHeaderSyntax_obj::canParse( ::markdown::BlockParser parser){
            	HX_STACKFRAME(&_hx_pos_de13594e7572dc68_222_canParse)
HXDLIN( 222)		return parser->matchesNext(::markdown::BlockSyntax_obj::RE_SETEXT);
            	}


::Dynamic SetextHeaderSyntax_obj::parse( ::markdown::BlockParser parser){
            	HX_GC_STACKFRAME(&_hx_pos_de13594e7572dc68_225_parse)
HXLINE( 226)		 ::EReg re = ::markdown::BlockSyntax_obj::RE_SETEXT;
HXLINE( 227)		re->match(parser->get_next());
HXLINE( 229)		::String tag;
HXDLIN( 229)		if ((re->matched(1).charAt(0) == HX_("=",3d,00,00,00))) {
HXLINE( 229)			tag = HX_("h1",c9,5a,00,00);
            		}
            		else {
HXLINE( 229)			tag = HX_("h2",ca,5a,00,00);
            		}
HXLINE( 230)		::Array< ::Dynamic> contents = parser->document->parseInline(parser->lines->__get(parser->pos));
HXLINE( 231)		parser->advance();
HXLINE( 232)		parser->advance();
HXLINE( 233)		return  ::markdown::ElementNode_obj::__alloc( HX_CTX ,tag,contents);
            	}



::hx::ObjectPtr< SetextHeaderSyntax_obj > SetextHeaderSyntax_obj::__new() {
	::hx::ObjectPtr< SetextHeaderSyntax_obj > __this = new SetextHeaderSyntax_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< SetextHeaderSyntax_obj > SetextHeaderSyntax_obj::__alloc(::hx::Ctx *_hx_ctx) {
	SetextHeaderSyntax_obj *__this = (SetextHeaderSyntax_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SetextHeaderSyntax_obj), false, "markdown.SetextHeaderSyntax"));
	*(void **)__this = SetextHeaderSyntax_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SetextHeaderSyntax_obj::SetextHeaderSyntax_obj()
{
}

::hx::Val SetextHeaderSyntax_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canParse") ) { return ::hx::Val( canParse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SetextHeaderSyntax_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SetextHeaderSyntax_obj_sStaticStorageInfo = 0;
#endif

static ::String SetextHeaderSyntax_obj_sMemberFields[] = {
	HX_("canParse",03,d2,e8,2b),
	HX_("parse",33,90,55,bd),
	::String(null()) };

::hx::Class SetextHeaderSyntax_obj::__mClass;

void SetextHeaderSyntax_obj::__register()
{
	SetextHeaderSyntax_obj _hx_dummy;
	SetextHeaderSyntax_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.SetextHeaderSyntax",ee,2e,7a,01);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SetextHeaderSyntax_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SetextHeaderSyntax_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetextHeaderSyntax_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetextHeaderSyntax_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
