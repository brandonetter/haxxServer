// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_markdown_ElementNode
#include <markdown/ElementNode.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif
#ifndef INCLUDED_markdown_NodeVisitor
#include <markdown/NodeVisitor.h>
#endif
#ifndef INCLUDED_markdown_TextNode
#include <markdown/TextNode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8b838d58c010e75e_54_new,"markdown.ElementNode","new",0x731f9731,"markdown.ElementNode.new","markdown/AST.hx",54,0xb8299f3c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b838d58c010e75e_61_isEmpty,"markdown.ElementNode","isEmpty",0xee45e194,"markdown.ElementNode.isEmpty","markdown/AST.hx",61,0xb8299f3c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b838d58c010e75e_65_accept,"markdown.ElementNode","accept",0x938024d7,"markdown.ElementNode.accept","markdown/AST.hx",65,0xb8299f3c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b838d58c010e75e_39_empty,"markdown.ElementNode","empty",0x0242179e,"markdown.ElementNode.empty","markdown/AST.hx",39,0xb8299f3c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b838d58c010e75e_43_withTag,"markdown.ElementNode","withTag",0x4152a745,"markdown.ElementNode.withTag","markdown/AST.hx",43,0xb8299f3c)
HX_LOCAL_STACK_FRAME(_hx_pos_8b838d58c010e75e_47_text,"markdown.ElementNode","text",0x4c7bfcbc,"markdown.ElementNode.text","markdown/AST.hx",47,0xb8299f3c)
namespace markdown{

void ElementNode_obj::__construct(::String tag,::Array< ::Dynamic> children){
            	HX_GC_STACKFRAME(&_hx_pos_8b838d58c010e75e_54_new)
HXLINE(  55)		this->tag = tag;
HXLINE(  56)		this->children = children;
HXLINE(  57)		this->attributes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}

Dynamic ElementNode_obj::__CreateEmpty() { return new ElementNode_obj; }

void *ElementNode_obj::_hx_vtable = 0;

Dynamic ElementNode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ElementNode_obj > _hx_result = new ElementNode_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ElementNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x572df8ef;
}

static ::markdown::Node_obj _hx_markdown_ElementNode__hx_markdown_Node= {
	( void (::hx::Object::*)(::Dynamic))&::markdown::ElementNode_obj::accept,
};

void *ElementNode_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4834e911: return &_hx_markdown_ElementNode__hx_markdown_Node;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

bool ElementNode_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_8b838d58c010e75e_61_isEmpty)
HXDLIN(  61)		return ::hx::IsNull( this->children );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ElementNode_obj,isEmpty,return )

void ElementNode_obj::accept(::Dynamic visitor){
            	HX_STACKFRAME(&_hx_pos_8b838d58c010e75e_65_accept)
HXDLIN(  65)		if (::markdown::NodeVisitor_obj::visitElementBefore(visitor,::hx::ObjectPtr<OBJ_>(this))) {
HXLINE(  66)			{
HXLINE(  66)				int _g = 0;
HXDLIN(  66)				::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  66)				while((_g < _g1->length)){
HXLINE(  66)					::Dynamic child = _g1->__get(_g);
HXDLIN(  66)					_g = (_g + 1);
HXLINE(  67)					::markdown::Node_obj::accept(child,visitor);
            				}
            			}
HXLINE(  68)			::markdown::NodeVisitor_obj::visitElementAfter(visitor,::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ElementNode_obj,accept,(void))

 ::markdown::ElementNode ElementNode_obj::empty(::String tag){
            	HX_GC_STACKFRAME(&_hx_pos_8b838d58c010e75e_39_empty)
HXDLIN(  39)		return  ::markdown::ElementNode_obj::__alloc( HX_CTX ,tag,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ElementNode_obj,empty,return )

 ::markdown::ElementNode ElementNode_obj::withTag(::String tag){
            	HX_GC_STACKFRAME(&_hx_pos_8b838d58c010e75e_43_withTag)
HXDLIN(  43)		return  ::markdown::ElementNode_obj::__alloc( HX_CTX ,tag,::Array_obj< ::Dynamic>::__new(0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ElementNode_obj,withTag,return )

 ::markdown::ElementNode ElementNode_obj::text(::String tag,::String text){
            	HX_GC_STACKFRAME(&_hx_pos_8b838d58c010e75e_47_text)
HXDLIN(  47)		return  ::markdown::ElementNode_obj::__alloc( HX_CTX ,tag,::Array_obj< ::Dynamic>::__new(1)->init(0, ::markdown::TextNode_obj::__alloc( HX_CTX ,text)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ElementNode_obj,text,return )


::hx::ObjectPtr< ElementNode_obj > ElementNode_obj::__new(::String tag,::Array< ::Dynamic> children) {
	::hx::ObjectPtr< ElementNode_obj > __this = new ElementNode_obj();
	__this->__construct(tag,children);
	return __this;
}

::hx::ObjectPtr< ElementNode_obj > ElementNode_obj::__alloc(::hx::Ctx *_hx_ctx,::String tag,::Array< ::Dynamic> children) {
	ElementNode_obj *__this = (ElementNode_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ElementNode_obj), true, "markdown.ElementNode"));
	*(void **)__this = ElementNode_obj::_hx_vtable;
	__this->__construct(tag,children);
	return __this;
}

ElementNode_obj::ElementNode_obj()
{
}

void ElementNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ElementNode);
	HX_MARK_MEMBER_NAME(tag,"tag");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(attributes,"attributes");
	HX_MARK_END_CLASS();
}

void ElementNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tag,"tag");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(attributes,"attributes");
}

::hx::Val ElementNode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tag") ) { return ::hx::Val( tag ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"accept") ) { return ::hx::Val( accept_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return ::hx::Val( isEmpty_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { return ::hx::Val( children ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attributes") ) { return ::hx::Val( attributes ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ElementNode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { outValue = text_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { outValue = empty_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"withTag") ) { outValue = withTag_dyn(); return true; }
	}
	return false;
}

::hx::Val ElementNode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tag") ) { tag=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attributes") ) { attributes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ElementNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tag",5a,5a,58,00));
	outFields->push(HX_("children",3f,19,6a,70));
	outFields->push(HX_("attributes",d7,a8,71,97));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ElementNode_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(ElementNode_obj,tag),HX_("tag",5a,5a,58,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ElementNode_obj,children),HX_("children",3f,19,6a,70)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ElementNode_obj,attributes),HX_("attributes",d7,a8,71,97)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ElementNode_obj_sStaticStorageInfo = 0;
#endif

static ::String ElementNode_obj_sMemberFields[] = {
	HX_("tag",5a,5a,58,00),
	HX_("children",3f,19,6a,70),
	HX_("attributes",d7,a8,71,97),
	HX_("isEmpty",43,de,5f,0c),
	HX_("accept",08,93,06,0b),
	::String(null()) };

::hx::Class ElementNode_obj::__mClass;

static ::String ElementNode_obj_sStaticFields[] = {
	HX_("empty",8d,3a,da,6f),
	HX_("withTag",f4,a3,6c,5f),
	HX_("text",ad,cc,f9,4c),
	::String(null())
};

void ElementNode_obj::__register()
{
	ElementNode_obj _hx_dummy;
	ElementNode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.ElementNode",bf,2a,7e,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ElementNode_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ElementNode_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ElementNode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ElementNode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ElementNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ElementNode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
