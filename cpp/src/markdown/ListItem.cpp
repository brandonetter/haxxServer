// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_markdown_ListItem
#include <markdown/ListItem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_12968e2acf38a758_431_new,"markdown.ListItem","new",0x9852ff02,"markdown.ListItem.new","markdown/BlockParser.hx",431,0x037f5eb2)
namespace markdown{

void ListItem_obj::__construct(::Array< ::String > lines){
            	HX_STACKFRAME(&_hx_pos_12968e2acf38a758_431_new)
HXLINE( 432)		this->forceBlock = false;
HXLINE( 436)		this->lines = lines;
            	}

Dynamic ListItem_obj::__CreateEmpty() { return new ListItem_obj; }

void *ListItem_obj::_hx_vtable = 0;

Dynamic ListItem_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ListItem_obj > _hx_result = new ListItem_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ListItem_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x580189e0;
}


ListItem_obj::ListItem_obj()
{
}

void ListItem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ListItem);
	HX_MARK_MEMBER_NAME(forceBlock,"forceBlock");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_END_CLASS();
}

void ListItem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(forceBlock,"forceBlock");
	HX_VISIT_MEMBER_NAME(lines,"lines");
}

::hx::Val ListItem_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { return ::hx::Val( lines ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceBlock") ) { return ::hx::Val( forceBlock ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ListItem_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"forceBlock") ) { forceBlock=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ListItem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("forceBlock",62,5f,d1,4b));
	outFields->push(HX_("lines",ff,dd,01,75));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ListItem_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(ListItem_obj,forceBlock),HX_("forceBlock",62,5f,d1,4b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ListItem_obj,lines),HX_("lines",ff,dd,01,75)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ListItem_obj_sStaticStorageInfo = 0;
#endif

static ::String ListItem_obj_sMemberFields[] = {
	HX_("forceBlock",62,5f,d1,4b),
	HX_("lines",ff,dd,01,75),
	::String(null()) };

::hx::Class ListItem_obj::__mClass;

void ListItem_obj::__register()
{
	ListItem_obj _hx_dummy;
	ListItem_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.ListItem",10,16,eb,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ListItem_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ListItem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ListItem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ListItem_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
