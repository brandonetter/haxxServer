// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_markdown_BlockParser
#include <markdown/BlockParser.h>
#endif
#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_ElementNode
#include <markdown/ElementNode.h>
#endif
#ifndef INCLUDED_markdown_HorizontalRuleSyntax
#include <markdown/HorizontalRuleSyntax.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_795f599dd788951d_389_new,"markdown.HorizontalRuleSyntax","new",0x49732874,"markdown.HorizontalRuleSyntax.new","markdown/BlockParser.hx",389,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_795f599dd788951d_391_get_pattern,"markdown.HorizontalRuleSyntax","get_pattern",0x0e84f27b,"markdown.HorizontalRuleSyntax.get_pattern","markdown/BlockParser.hx",391,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_795f599dd788951d_394_parse,"markdown.HorizontalRuleSyntax","parse",0x0f0a1547,"markdown.HorizontalRuleSyntax.parse","markdown/BlockParser.hx",394,0x037f5eb2)
namespace markdown{

void HorizontalRuleSyntax_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_795f599dd788951d_389_new)
HXDLIN( 389)		super::__construct();
            	}

Dynamic HorizontalRuleSyntax_obj::__CreateEmpty() { return new HorizontalRuleSyntax_obj; }

void *HorizontalRuleSyntax_obj::_hx_vtable = 0;

Dynamic HorizontalRuleSyntax_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HorizontalRuleSyntax_obj > _hx_result = new HorizontalRuleSyntax_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HorizontalRuleSyntax_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x41d975bd) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x41d975bd;
	} else {
		return inClassId==(int)0x68a21ab6;
	}
}

 ::EReg HorizontalRuleSyntax_obj::get_pattern(){
            	HX_STACKFRAME(&_hx_pos_795f599dd788951d_391_get_pattern)
HXDLIN( 391)		return ::markdown::BlockSyntax_obj::RE_HR;
            	}


::Dynamic HorizontalRuleSyntax_obj::parse( ::markdown::BlockParser parser){
            	HX_STACKFRAME(&_hx_pos_795f599dd788951d_394_parse)
HXLINE( 395)		parser->advance();
HXLINE( 396)		return ::markdown::ElementNode_obj::empty(HX_("hr",0a,5b,00,00));
            	}



::hx::ObjectPtr< HorizontalRuleSyntax_obj > HorizontalRuleSyntax_obj::__new() {
	::hx::ObjectPtr< HorizontalRuleSyntax_obj > __this = new HorizontalRuleSyntax_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< HorizontalRuleSyntax_obj > HorizontalRuleSyntax_obj::__alloc(::hx::Ctx *_hx_ctx) {
	HorizontalRuleSyntax_obj *__this = (HorizontalRuleSyntax_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HorizontalRuleSyntax_obj), false, "markdown.HorizontalRuleSyntax"));
	*(void **)__this = HorizontalRuleSyntax_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

HorizontalRuleSyntax_obj::HorizontalRuleSyntax_obj()
{
}

::hx::Val HorizontalRuleSyntax_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_pattern") ) { return ::hx::Val( get_pattern_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *HorizontalRuleSyntax_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *HorizontalRuleSyntax_obj_sStaticStorageInfo = 0;
#endif

static ::String HorizontalRuleSyntax_obj_sMemberFields[] = {
	HX_("get_pattern",67,66,71,97),
	HX_("parse",33,90,55,bd),
	::String(null()) };

::hx::Class HorizontalRuleSyntax_obj::__mClass;

void HorizontalRuleSyntax_obj::__register()
{
	HorizontalRuleSyntax_obj _hx_dummy;
	HorizontalRuleSyntax_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.HorizontalRuleSyntax",82,1e,b9,fa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HorizontalRuleSyntax_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HorizontalRuleSyntax_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HorizontalRuleSyntax_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HorizontalRuleSyntax_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
