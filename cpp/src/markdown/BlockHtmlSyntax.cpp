// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_markdown_BlockHtmlSyntax
#include <markdown/BlockHtmlSyntax.h>
#endif
#ifndef INCLUDED_markdown_BlockParser
#include <markdown/BlockParser.h>
#endif
#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif
#ifndef INCLUDED_markdown_TextNode
#include <markdown/TextNode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_65ea761b31847e36_410_new,"markdown.BlockHtmlSyntax","new",0x0dd1952e,"markdown.BlockHtmlSyntax.new","markdown/BlockParser.hx",410,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_65ea761b31847e36_412_get_pattern,"markdown.BlockHtmlSyntax","get_pattern",0x7c95a935,"markdown.BlockHtmlSyntax.get_pattern","markdown/BlockParser.hx",412,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_65ea761b31847e36_416_get_canEndBlock,"markdown.BlockHtmlSyntax","get_canEndBlock",0xf97c4107,"markdown.BlockHtmlSyntax.get_canEndBlock","markdown/BlockParser.hx",416,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_65ea761b31847e36_418_parse,"markdown.BlockHtmlSyntax","parse",0x7968a481,"markdown.BlockHtmlSyntax.parse","markdown/BlockParser.hx",418,0x037f5eb2)
namespace markdown{

void BlockHtmlSyntax_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_65ea761b31847e36_410_new)
HXDLIN( 410)		super::__construct();
            	}

Dynamic BlockHtmlSyntax_obj::__CreateEmpty() { return new BlockHtmlSyntax_obj; }

void *BlockHtmlSyntax_obj::_hx_vtable = 0;

Dynamic BlockHtmlSyntax_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BlockHtmlSyntax_obj > _hx_result = new BlockHtmlSyntax_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BlockHtmlSyntax_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x41d975bd) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x41d975bd;
	} else {
		return inClassId==(int)0x42eacc6c;
	}
}

 ::EReg BlockHtmlSyntax_obj::get_pattern(){
            	HX_STACKFRAME(&_hx_pos_65ea761b31847e36_412_get_pattern)
HXDLIN( 412)		return ::markdown::BlockSyntax_obj::RE_HTML;
            	}


bool BlockHtmlSyntax_obj::get_canEndBlock(){
            	HX_STACKFRAME(&_hx_pos_65ea761b31847e36_416_get_canEndBlock)
HXDLIN( 416)		return false;
            	}


::Dynamic BlockHtmlSyntax_obj::parse( ::markdown::BlockParser parser){
            	HX_GC_STACKFRAME(&_hx_pos_65ea761b31847e36_418_parse)
HXLINE( 419)		::Array< ::String > childLines = ::Array_obj< ::String >::__new(0);
HXLINE( 422)		while(true){
HXLINE( 422)			bool _hx_tmp;
HXDLIN( 422)			if ((parser->pos < parser->lines->length)) {
HXLINE( 422)				_hx_tmp = !(parser->matches(::markdown::BlockSyntax_obj::RE_EMPTY));
            			}
            			else {
HXLINE( 422)				_hx_tmp = false;
            			}
HXDLIN( 422)			if (!(_hx_tmp)) {
HXLINE( 422)				goto _hx_goto_3;
            			}
HXLINE( 423)			childLines->push(parser->lines->__get(parser->pos));
HXLINE( 424)			parser->advance();
            		}
            		_hx_goto_3:;
HXLINE( 427)		return  ::markdown::TextNode_obj::__alloc( HX_CTX ,childLines->join(HX_("\n",0a,00,00,00)));
            	}



::hx::ObjectPtr< BlockHtmlSyntax_obj > BlockHtmlSyntax_obj::__new() {
	::hx::ObjectPtr< BlockHtmlSyntax_obj > __this = new BlockHtmlSyntax_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BlockHtmlSyntax_obj > BlockHtmlSyntax_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BlockHtmlSyntax_obj *__this = (BlockHtmlSyntax_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BlockHtmlSyntax_obj), false, "markdown.BlockHtmlSyntax"));
	*(void **)__this = BlockHtmlSyntax_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BlockHtmlSyntax_obj::BlockHtmlSyntax_obj()
{
}

::hx::Val BlockHtmlSyntax_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_pattern") ) { return ::hx::Val( get_pattern_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_canEndBlock") ) { return ::hx::Val( get_canEndBlock_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BlockHtmlSyntax_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BlockHtmlSyntax_obj_sStaticStorageInfo = 0;
#endif

static ::String BlockHtmlSyntax_obj_sMemberFields[] = {
	HX_("get_pattern",67,66,71,97),
	HX_("get_canEndBlock",39,7f,83,a3),
	HX_("parse",33,90,55,bd),
	::String(null()) };

::hx::Class BlockHtmlSyntax_obj::__mClass;

void BlockHtmlSyntax_obj::__register()
{
	BlockHtmlSyntax_obj _hx_dummy;
	BlockHtmlSyntax_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.BlockHtmlSyntax",3c,26,00,a9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BlockHtmlSyntax_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BlockHtmlSyntax_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlockHtmlSyntax_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlockHtmlSyntax_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
