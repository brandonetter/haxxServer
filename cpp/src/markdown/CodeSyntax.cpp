// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_markdown_CodeSyntax
#include <markdown/CodeSyntax.h>
#endif
#ifndef INCLUDED_markdown_ElementNode
#include <markdown/ElementNode.h>
#endif
#ifndef INCLUDED_markdown_InlineParser
#include <markdown/InlineParser.h>
#endif
#ifndef INCLUDED_markdown_InlineSyntax
#include <markdown/InlineSyntax.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b5fc6cd1652a8c07_510_new,"markdown.CodeSyntax","new",0xbecd8b21,"markdown.CodeSyntax.new","markdown/InlineParser.hx",510,0xf7baa326)
HX_LOCAL_STACK_FRAME(_hx_pos_b5fc6cd1652a8c07_513_onMatch,"markdown.CodeSyntax","onMatch",0x309596e7,"markdown.CodeSyntax.onMatch","markdown/InlineParser.hx",513,0xf7baa326)
namespace markdown{

void CodeSyntax_obj::__construct(::String pattern){
            	HX_STACKFRAME(&_hx_pos_b5fc6cd1652a8c07_510_new)
HXDLIN( 510)		super::__construct(pattern);
            	}

Dynamic CodeSyntax_obj::__CreateEmpty() { return new CodeSyntax_obj; }

void *CodeSyntax_obj::_hx_vtable = 0;

Dynamic CodeSyntax_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CodeSyntax_obj > _hx_result = new CodeSyntax_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CodeSyntax_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a41b0ab) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0a41b0ab;
	} else {
		return inClassId==(int)0x0c65d26b;
	}
}

bool CodeSyntax_obj::onMatch( ::markdown::InlineParser parser){
            	HX_STACKFRAME(&_hx_pos_b5fc6cd1652a8c07_513_onMatch)
HXLINE( 514)		parser->addNode(::markdown::ElementNode_obj::text(HX_("code",2d,b1,c4,41),::StringTools_obj::htmlEscape(this->pattern->matched(1),null())));
HXLINE( 515)		return true;
            	}



::hx::ObjectPtr< CodeSyntax_obj > CodeSyntax_obj::__new(::String pattern) {
	::hx::ObjectPtr< CodeSyntax_obj > __this = new CodeSyntax_obj();
	__this->__construct(pattern);
	return __this;
}

::hx::ObjectPtr< CodeSyntax_obj > CodeSyntax_obj::__alloc(::hx::Ctx *_hx_ctx,::String pattern) {
	CodeSyntax_obj *__this = (CodeSyntax_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CodeSyntax_obj), true, "markdown.CodeSyntax"));
	*(void **)__this = CodeSyntax_obj::_hx_vtable;
	__this->__construct(pattern);
	return __this;
}

CodeSyntax_obj::CodeSyntax_obj()
{
}

::hx::Val CodeSyntax_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onMatch") ) { return ::hx::Val( onMatch_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CodeSyntax_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CodeSyntax_obj_sStaticStorageInfo = 0;
#endif

static ::String CodeSyntax_obj_sMemberFields[] = {
	HX_("onMatch",a6,e7,60,99),
	::String(null()) };

::hx::Class CodeSyntax_obj::__mClass;

void CodeSyntax_obj::__register()
{
	CodeSyntax_obj _hx_dummy;
	CodeSyntax_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.CodeSyntax",af,66,47,ce);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CodeSyntax_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CodeSyntax_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CodeSyntax_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CodeSyntax_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
