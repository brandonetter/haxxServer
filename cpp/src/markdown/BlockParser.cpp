// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_Document
#include <Document.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_markdown_BlockParser
#include <markdown/BlockParser.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_69697c044c3a5230_22_new,"markdown.BlockParser","new",0x44c7d15f,"markdown.BlockParser.new","markdown/BlockParser.hx",22,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_69697c044c3a5230_32_get_current,"markdown.BlockParser","get_current",0x48c9944f,"markdown.BlockParser.get_current","markdown/BlockParser.hx",32,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_69697c044c3a5230_37_get_next,"markdown.BlockParser","get_next",0xd4ca431d,"markdown.BlockParser.get_next","markdown/BlockParser.hx",37,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_69697c044c3a5230_46_advance,"markdown.BlockParser","advance",0x50adf501,"markdown.BlockParser.advance","markdown/BlockParser.hx",46,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_69697c044c3a5230_52_get_isDone,"markdown.BlockParser","get_isDone",0x3ba7d236,"markdown.BlockParser.get_isDone","markdown/BlockParser.hx",52,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_69697c044c3a5230_55_matches,"markdown.BlockParser","matches",0xeb1e2972,"markdown.BlockParser.matches","markdown/BlockParser.hx",55,0x037f5eb2)
HX_LOCAL_STACK_FRAME(_hx_pos_69697c044c3a5230_62_matchesNext,"markdown.BlockParser","matchesNext",0x17707b85,"markdown.BlockParser.matchesNext","markdown/BlockParser.hx",62,0x037f5eb2)
namespace markdown{

void BlockParser_obj::__construct(::Array< ::String > lines, ::Document document){
            	HX_STACKFRAME(&_hx_pos_69697c044c3a5230_22_new)
HXLINE(  23)		this->lines = lines;
HXLINE(  24)		this->document = document;
HXLINE(  25)		this->pos = 0;
            	}

Dynamic BlockParser_obj::__CreateEmpty() { return new BlockParser_obj; }

void *BlockParser_obj::_hx_vtable = 0;

Dynamic BlockParser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BlockParser_obj > _hx_result = new BlockParser_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool BlockParser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3fcd9039;
}

::String BlockParser_obj::get_current(){
            	HX_STACKFRAME(&_hx_pos_69697c044c3a5230_32_get_current)
HXDLIN(  32)		return this->lines->__get(this->pos);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BlockParser_obj,get_current,return )

::String BlockParser_obj::get_next(){
            	HX_STACKFRAME(&_hx_pos_69697c044c3a5230_37_get_next)
HXLINE(  39)		if ((this->pos >= (this->lines->length - 1))) {
HXLINE(  40)			return null();
            		}
HXLINE(  41)		return this->lines->__get((this->pos + 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BlockParser_obj,get_next,return )

void BlockParser_obj::advance(){
            	HX_STACKFRAME(&_hx_pos_69697c044c3a5230_46_advance)
HXDLIN(  46)		this->pos++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BlockParser_obj,advance,(void))

bool BlockParser_obj::get_isDone(){
            	HX_STACKFRAME(&_hx_pos_69697c044c3a5230_52_get_isDone)
HXDLIN(  52)		return (this->pos >= this->lines->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BlockParser_obj,get_isDone,return )

bool BlockParser_obj::matches( ::EReg ereg){
            	HX_STACKFRAME(&_hx_pos_69697c044c3a5230_55_matches)
HXLINE(  56)		if ((this->pos >= this->lines->length)) {
HXLINE(  57)			return false;
            		}
HXLINE(  58)		return ereg->match(this->lines->__get(this->pos));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BlockParser_obj,matches,return )

bool BlockParser_obj::matchesNext( ::EReg ereg){
            	HX_STACKFRAME(&_hx_pos_69697c044c3a5230_62_matchesNext)
HXLINE(  63)		if (::hx::IsNull( this->get_next() )) {
HXLINE(  64)			return false;
            		}
HXLINE(  65)		return ereg->match(this->get_next());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BlockParser_obj,matchesNext,return )


::hx::ObjectPtr< BlockParser_obj > BlockParser_obj::__new(::Array< ::String > lines, ::Document document) {
	::hx::ObjectPtr< BlockParser_obj > __this = new BlockParser_obj();
	__this->__construct(lines,document);
	return __this;
}

::hx::ObjectPtr< BlockParser_obj > BlockParser_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::String > lines, ::Document document) {
	BlockParser_obj *__this = (BlockParser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BlockParser_obj), true, "markdown.BlockParser"));
	*(void **)__this = BlockParser_obj::_hx_vtable;
	__this->__construct(lines,document);
	return __this;
}

BlockParser_obj::BlockParser_obj()
{
}

void BlockParser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BlockParser);
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(document,"document");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_END_CLASS();
}

void BlockParser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(document,"document");
	HX_VISIT_MEMBER_NAME(pos,"pos");
}

::hx::Val BlockParser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return ::hx::Val( pos ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_next() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { return ::hx::Val( lines ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isDone") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isDone() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_current() ); }
		if (HX_FIELD_EQ(inName,"advance") ) { return ::hx::Val( advance_dyn() ); }
		if (HX_FIELD_EQ(inName,"matches") ) { return ::hx::Val( matches_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"document") ) { return ::hx::Val( document ); }
		if (HX_FIELD_EQ(inName,"get_next") ) { return ::hx::Val( get_next_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_isDone") ) { return ::hx::Val( get_isDone_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_current") ) { return ::hx::Val( get_current_dyn() ); }
		if (HX_FIELD_EQ(inName,"matchesNext") ) { return ::hx::Val( matchesNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BlockParser_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"document") ) { document=inValue.Cast<  ::Document >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BlockParser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lines",ff,dd,01,75));
	outFields->push(HX_("document",1b,ef,12,9b));
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("current",39,9c,e3,cb));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("isDone",8c,b5,d4,5f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BlockParser_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(BlockParser_obj,lines),HX_("lines",ff,dd,01,75)},
	{::hx::fsObject /*  ::Document */ ,(int)offsetof(BlockParser_obj,document),HX_("document",1b,ef,12,9b)},
	{::hx::fsInt,(int)offsetof(BlockParser_obj,pos),HX_("pos",94,5d,55,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BlockParser_obj_sStaticStorageInfo = 0;
#endif

static ::String BlockParser_obj_sMemberFields[] = {
	HX_("lines",ff,dd,01,75),
	HX_("document",1b,ef,12,9b),
	HX_("pos",94,5d,55,00),
	HX_("get_current",50,fc,dd,51),
	HX_("get_next",7c,40,bd,c8),
	HX_("advance",82,08,0c,ef),
	HX_("get_isDone",55,25,5c,50),
	HX_("matches",f3,3c,7c,89),
	HX_("matchesNext",86,e3,84,20),
	::String(null()) };

::hx::Class BlockParser_obj::__mClass;

void BlockParser_obj::__register()
{
	BlockParser_obj _hx_dummy;
	BlockParser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("markdown.BlockParser",ed,35,56,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BlockParser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BlockParser_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlockParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlockParser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace markdown
