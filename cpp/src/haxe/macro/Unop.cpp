// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_macro_Unop
#include <haxe/macro/Unop.h>
#endif
namespace haxe{
namespace macro{

::haxe::macro::Unop Unop_obj::OpDecrement;

::haxe::macro::Unop Unop_obj::OpIncrement;

::haxe::macro::Unop Unop_obj::OpNeg;

::haxe::macro::Unop Unop_obj::OpNegBits;

::haxe::macro::Unop Unop_obj::OpNot;

::haxe::macro::Unop Unop_obj::OpSpread;

bool Unop_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("OpDecrement",92,60,8c,97)) { outValue = Unop_obj::OpDecrement; return true; }
	if (inName==HX_("OpIncrement",ae,70,09,b9)) { outValue = Unop_obj::OpIncrement; return true; }
	if (inName==HX_("OpNeg",8f,41,eb,c6)) { outValue = Unop_obj::OpNeg; return true; }
	if (inName==HX_("OpNegBits",35,dc,5c,a6)) { outValue = Unop_obj::OpNegBits; return true; }
	if (inName==HX_("OpNot",52,4a,eb,c6)) { outValue = Unop_obj::OpNot; return true; }
	if (inName==HX_("OpSpread",94,62,1c,d0)) { outValue = Unop_obj::OpSpread; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(Unop_obj)

int Unop_obj::__FindIndex(::String inName)
{
	if (inName==HX_("OpDecrement",92,60,8c,97)) return 1;
	if (inName==HX_("OpIncrement",ae,70,09,b9)) return 0;
	if (inName==HX_("OpNeg",8f,41,eb,c6)) return 3;
	if (inName==HX_("OpNegBits",35,dc,5c,a6)) return 4;
	if (inName==HX_("OpNot",52,4a,eb,c6)) return 2;
	if (inName==HX_("OpSpread",94,62,1c,d0)) return 5;
	return super::__FindIndex(inName);
}

int Unop_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("OpDecrement",92,60,8c,97)) return 0;
	if (inName==HX_("OpIncrement",ae,70,09,b9)) return 0;
	if (inName==HX_("OpNeg",8f,41,eb,c6)) return 0;
	if (inName==HX_("OpNegBits",35,dc,5c,a6)) return 0;
	if (inName==HX_("OpNot",52,4a,eb,c6)) return 0;
	if (inName==HX_("OpSpread",94,62,1c,d0)) return 0;
	return super::__FindArgCount(inName);
}

::hx::Val Unop_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("OpDecrement",92,60,8c,97)) return OpDecrement;
	if (inName==HX_("OpIncrement",ae,70,09,b9)) return OpIncrement;
	if (inName==HX_("OpNeg",8f,41,eb,c6)) return OpNeg;
	if (inName==HX_("OpNegBits",35,dc,5c,a6)) return OpNegBits;
	if (inName==HX_("OpNot",52,4a,eb,c6)) return OpNot;
	if (inName==HX_("OpSpread",94,62,1c,d0)) return OpSpread;
	return super::__Field(inName,inCallProp);
}

static ::String Unop_obj_sStaticFields[] = {
	HX_("OpIncrement",ae,70,09,b9),
	HX_("OpDecrement",92,60,8c,97),
	HX_("OpNot",52,4a,eb,c6),
	HX_("OpNeg",8f,41,eb,c6),
	HX_("OpNegBits",35,dc,5c,a6),
	HX_("OpSpread",94,62,1c,d0),
	::String(null())
};

::hx::Class Unop_obj::__mClass;

Dynamic __Create_Unop_obj() { return new Unop_obj; }

void Unop_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("haxe.macro.Unop",c4,66,6b,9b), ::hx::TCanCast< Unop_obj >,Unop_obj_sStaticFields,0,
	&__Create_Unop_obj, &__Create,
	&super::__SGetClass(), &CreateUnop_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &Unop_obj::__GetStatic;
}

void Unop_obj::__boot()
{
OpDecrement = ::hx::CreateConstEnum< Unop_obj >(HX_("OpDecrement",92,60,8c,97),1);
OpIncrement = ::hx::CreateConstEnum< Unop_obj >(HX_("OpIncrement",ae,70,09,b9),0);
OpNeg = ::hx::CreateConstEnum< Unop_obj >(HX_("OpNeg",8f,41,eb,c6),3);
OpNegBits = ::hx::CreateConstEnum< Unop_obj >(HX_("OpNegBits",35,dc,5c,a6),4);
OpNot = ::hx::CreateConstEnum< Unop_obj >(HX_("OpNot",52,4a,eb,c6),2);
OpSpread = ::hx::CreateConstEnum< Unop_obj >(HX_("OpSpread",94,62,1c,d0),5);
}


} // end namespace haxe
} // end namespace macro
