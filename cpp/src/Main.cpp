// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DateTools
#include <DateTools.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Markdown
#include <Markdown.h>
#endif
#ifndef INCLUDED_Page
#include <Page.h>
#endif
#ifndef INCLUDED_PageRoute
#include <PageRoute.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_24_main,"Main","main",0xed0e206e,"Main.main","Main.hx",24,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_16_main,"Main","main",0xed0e206e,"Main.main","Main.hx",16,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_41_main,"Main","main",0xed0e206e,"Main.main","Main.hx",41,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_79_page,"Main","page",0xef09c284,"Main.page","Main.hx",79,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_88_page,"Main","page",0xef09c284,"Main.page","Main.hx",88,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_127_fileResolve,"Main","fileResolve",0xf9a12c3b,"Main.fileResolve","Main.hx",127,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_157_updateRoute,"Main","updateRoute",0xd2051f2b,"Main.updateRoute","Main.hx",157,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_9_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",9,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

 ::haxe::ds::List Main_obj::RouteList;

void Main_obj::main(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_24_main)
HXLINE(  24)			while(true){
HXLINE(  25)				 ::haxe::ds::List old = ::Main_obj::RouteList;
HXLINE(  26)				::Main_obj::RouteList = ::Main_obj::updateRoute();
HXLINE(  29)				::String _hx_tmp = old->toString();
HXDLIN(  29)				if ((_hx_tmp != ::Main_obj::RouteList->toString())) {
HXLINE(  30)					::Sys_obj::println(HX_("Updated RouteList from route.txt",13,99,65,4e));
            				}
HXLINE(  33)				::Sys_obj::sleep(((Float)5.5));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_16_main)
HXLINE(  17)		 ::sys::net::Socket s =  ::sys::net::Socket_obj::__alloc( HX_CTX );
HXLINE(  19)		s->bind( ::sys::net::Host_obj::__alloc( HX_CTX ,HX_("0.0.0.0",76,1a,39,f2)),4599);
HXLINE(  20)		s->listen(1);
HXLINE(  23)		::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0()),false);
HXLINE(  37)		while(true){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::sys::net::Socket,c) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_41_main)
HXLINE(  43)				::String req = c->input->readLine();
HXLINE(  44)				req = req.substr(0,100);
HXLINE(  45)				::Array< ::String > stringAr = req.toString().split(HX_("\n",0a,00,00,00));
HXLINE(  46)				::String fileName = ::Main_obj::fileResolve(stringAr->__get(0));
HXLINE(  47)				 ::Page p = ::Main_obj::page(fileName);
HXLINE(  51)				c->write(HX_("Server: haxeServ\n",05,1b,89,72));
HXLINE(  52)				c->write(((HX_("Content-Length: ",20,de,22,7c) + p->length) + HX_("\n",0a,00,00,00)));
HXLINE(  53)				c->write(HX_("Content-Type: text/html\n",11,4f,36,e5));
HXLINE(  54)				c->write(HX_("Connection: Closed\n\n\n",1a,da,4f,02));
HXLINE(  56)				c->write(p->data);
HXLINE(  60)				::Sys_obj::sleep((((Float)0.3) + p->timeAdd));
HXLINE(  61)				c->close();
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  39)			 ::sys::net::Socket c = s->accept();
HXLINE(  40)			c->write(HX_("HTTP/1.1 200 OK\n",4d,81,b0,6e));
HXLINE(  41)			::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_1(c)),false);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

 ::Page Main_obj::page(::String pageName){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_79_page)
HXLINE(  80)		::String data = HX_("If you see this call the cops",0f,bc,a7,54);
HXLINE(  81)		::String pdata = HX_("o",6f,00,00,00);
HXLINE(  82)		 ::Page p =  ::Page_obj::__alloc( HX_CTX );
HXLINE(  84)		if ((pageName.split(HX_(".",2e,00,00,00))->__get(1) == HX_("php",78,57,55,00))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::String,pageName) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_88_page)
HXLINE(  88)				::Sys_obj::command(((((HX_("php -f ",bf,c5,ab,58) + pageName) + HX_("> ./tmp/html_",d9,9e,e3,ac)) + pageName) + HX_(" | grep 0",2a,30,d3,5a)),null());
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  87)			::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0(pageName)),false);
HXLINE(  91)			pdata = ::sys::io::File_obj::getContent((HX_("./tmp/html_",bb,85,57,90) + pageName));
            		}
HXLINE(  96)		::String data1 = ::sys::io::File_obj::getContent(pageName);
HXLINE(  97)		int length = 0;
HXLINE(  98)		if ((pageName.split(HX_(".",2e,00,00,00))->__get(1) == HX_("php",78,57,55,00))) {
HXLINE(  99)			data1 = pdata;
HXLINE( 100)			length = (length + 1);
HXLINE( 101)			p->timeAdd = ((Float)0.1);
            		}
            		else {
HXLINE( 103)			data1 = ::StringTools_obj::replace(data1,HX_("{{time}}",4d,fa,de,94),::DateTools_obj::format(::Date_obj::now(),HX_("%Y-%m-%d_%H:%M:%S",5d,a1,9d,6e)));
            		}
HXLINE( 105)		length = (length + data1.length);
HXLINE( 109)		p->data = data1;
HXLINE( 110)		p->length = length;
HXLINE( 111)		if ((pageName.split(HX_(".",2e,00,00,00))->__get(1) == HX_("md",57,5f,00,00))) {
HXLINE( 112)			p->data = ::Markdown_obj::markdownToHtml(p->data);
            		}
HXLINE( 114)		return p;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,page,return )

::String Main_obj::fileResolve(::String req){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_127_fileResolve)
HXLINE( 130)		::String fileName = HX_("notfound.txt",d1,76,e2,ca);
HXLINE( 131)		 ::haxe::ds::_List::ListNode RouteIt_head = ::Main_obj::RouteList->h;
HXLINE( 132)		{
HXLINE( 132)			int _g = 0;
HXDLIN( 132)			int _g1 = ::Main_obj::RouteList->length;
HXDLIN( 132)			while((_g < _g1)){
HXLINE( 132)				_g = (_g + 1);
HXDLIN( 132)				int i = (_g - 1);
HXLINE( 133)				 ::PageRoute val = ( ( ::PageRoute)(RouteIt_head->item) );
HXDLIN( 133)				RouteIt_head = RouteIt_head->next;
HXDLIN( 133)				 ::PageRoute pr = val;
HXLINE( 134)				::String pr_r = pr->request;
HXLINE( 135)				::String pr_o = pr->output;
HXLINE( 136)				 ::EReg regexp =  ::EReg_obj::__alloc( HX_CTX ,(HX_("GET /",05,c2,4e,0f) + pr_r),HX_("i",69,00,00,00));
HXLINE( 137)				if (regexp->match(req)) {
HXLINE( 139)					fileName = pr_o;
            				}
            			}
            		}
HXLINE( 142)		return fileName;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,fileResolve,return )

 ::haxe::ds::List Main_obj::updateRoute(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_157_updateRoute)
HXLINE( 158)		::String data = ::sys::io::File_obj::getContent(HX_("route.txt",0b,35,4e,65));
HXLINE( 159)		 ::EReg r =  ::EReg_obj::__alloc( HX_CTX ,HX_("\n",0a,00,00,00),HX_("g",67,00,00,00));
HXLINE( 160)		data = r->replace(data,HX_("",00,00,00,00));
HXLINE( 161)		::Array< ::String > dataList = data.split(HX_(";",3b,00,00,00));
HXLINE( 162)		 ::haxe::ds::List RouteList =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 163)		{
HXLINE( 163)			int _g = 0;
HXDLIN( 163)			int _g1 = (dataList->length - 1);
HXDLIN( 163)			while((_g < _g1)){
HXLINE( 163)				_g = (_g + 1);
HXDLIN( 163)				int i = (_g - 1);
HXLINE( 164)				::Array< ::String > route = dataList->__get(i).split(HX_("=>",61,35,00,00));
HXLINE( 165)				 ::PageRoute pageRoute =  ::PageRoute_obj::__alloc( HX_CTX );
HXLINE( 166)				pageRoute->request = route->__get(0);
HXLINE( 167)				pageRoute->output = route->__get(1);
HXLINE( 168)				RouteList->push(pageRoute);
            			}
            		}
HXLINE( 171)		return RouteList;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,updateRoute,return )


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"page") ) { outValue = page_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"RouteList") ) { outValue = ( RouteList ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fileResolve") ) { outValue = fileResolve_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateRoute") ) { outValue = updateRoute_dyn(); return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"RouteList") ) { RouteList=ioValue.Cast<  ::haxe::ds::List >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::List */ ,(void *) &Main_obj::RouteList,HX_("RouteList",67,1e,ed,1a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::RouteList,"RouteList");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::RouteList,"RouteList");
};

#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("RouteList",67,1e,ed,1a),
	HX_("main",39,38,56,48),
	HX_("page",4f,da,51,4a),
	HX_("fileResolve",d0,73,9a,fa),
	HX_("updateRoute",c0,66,fe,d2),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_9_boot)
HXDLIN(   9)		RouteList =  ::haxe::ds::List_obj::__alloc( HX_CTX );
            	}
}

