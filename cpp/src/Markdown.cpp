// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_Document
#include <Document.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Markdown
#include <Markdown.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_markdown_HtmlRenderer
#include <markdown/HtmlRenderer.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif
#ifndef INCLUDED_markdown_NodeVisitor
#include <markdown/NodeVisitor.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a75ea82134c3f892_10_main,"Markdown","main",0xee4771f8,"Markdown.main","Markdown.hx",10,0xe43b570f)
HX_LOCAL_STACK_FRAME(_hx_pos_a75ea82134c3f892_36_markdownToHtml,"Markdown","markdownToHtml",0xb6ca1354,"Markdown.markdownToHtml","Markdown.hx",36,0xe43b570f)
HX_LOCAL_STACK_FRAME(_hx_pos_a75ea82134c3f892_56_renderHtml,"Markdown","renderHtml",0x60c622e0,"Markdown.renderHtml","Markdown.hx",56,0xe43b570f)

void Markdown_obj::__construct() { }

Dynamic Markdown_obj::__CreateEmpty() { return new Markdown_obj; }

void *Markdown_obj::_hx_vtable = 0;

Dynamic Markdown_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Markdown_obj > _hx_result = new Markdown_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Markdown_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b3e5733;
}

void Markdown_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_a75ea82134c3f892_10_main)
HXLINE(  11)		::Array< ::String > args = ::Sys_obj::args();
HXLINE(  13)		::String last =  ::haxe::io::Path_obj::__alloc( HX_CTX ,args->__get((args->length - 1)))->toString();
HXLINE(  14)		::String slash = last.substr(-1,null());
HXLINE(  15)		bool _hx_tmp;
HXDLIN(  15)		if ((slash != HX_("/",2f,00,00,00))) {
HXLINE(  15)			_hx_tmp = (slash == HX_("\\",5c,00,00,00));
            		}
            		else {
HXLINE(  15)			_hx_tmp = true;
            		}
HXDLIN(  15)		if (_hx_tmp) {
HXLINE(  16)			last = last.substr(0,(last.length - 1));
            		}
HXLINE(  17)		bool _hx_tmp1;
HXDLIN(  17)		if (::sys::FileSystem_obj::exists(last)) {
HXLINE(  17)			_hx_tmp1 = ::sys::FileSystem_obj::isDirectory(last);
            		}
            		else {
HXLINE(  17)			_hx_tmp1 = false;
            		}
HXDLIN(  17)		if (_hx_tmp1) {
HXLINE(  18)			::Sys_obj::setCwd(last);
            		}
HXLINE(  21)		::String source = args->__get(0);
HXLINE(  22)		if ((source == HX_("-f",99,27,00,00))) {
HXLINE(  23)			source = ::sys::io::File_obj::getContent(args->__get(1));
            		}
HXLINE(  25)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  26)			::String output = ::Markdown_obj::markdownToHtml(source);
HXLINE(  27)			::Sys_obj::print(output);
HXLINE(  28)			::Sys_obj::exit(0);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXLINE(  30)				::Sys_obj::print((HX_("Error: ",4e,a8,5b,b7) + ::haxe::_CallStack::CallStack_Impl__obj::toString(::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(null()))));
HXLINE(  31)				::Sys_obj::exit(1);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Markdown_obj,main,(void))

::String Markdown_obj::markdownToHtml(::String markdown){
            	HX_GC_STACKFRAME(&_hx_pos_a75ea82134c3f892_36_markdownToHtml)
HXLINE(  38)		 ::Document document =  ::Document_obj::__alloc( HX_CTX );
HXLINE(  40)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  42)			::Array< ::String > lines =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\r\n|\r)",93,3e,76,81),HX_("g",67,00,00,00))->replace(markdown,HX_("\n",0a,00,00,00)).split(HX_("\n",0a,00,00,00));
HXLINE(  45)			document->parseRefLinks(lines);
HXLINE(  48)			::Array< ::Dynamic> blocks = document->parseLines(lines);
HXLINE(  49)			return ::Markdown_obj::renderHtml(blocks);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				{
HXLINE(   1)					null();
            				}
HXDLIN(   1)				 ::Dynamic e = ::haxe::Exception_obj::caught(_g)->unwrap();
HXLINE(  51)				return ((HX_("<pre>",f7,8c,69,d6) + ::Std_obj::string(e)) + HX_("</pre>",ae,a8,9d,57));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  40)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Markdown_obj,markdownToHtml,return )

::String Markdown_obj::renderHtml(::Array< ::Dynamic> blocks){
            	HX_GC_STACKFRAME(&_hx_pos_a75ea82134c3f892_56_renderHtml)
HXDLIN(  56)		return  ::markdown::HtmlRenderer_obj::__alloc( HX_CTX )->render(blocks);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Markdown_obj,renderHtml,return )


Markdown_obj::Markdown_obj()
{
}

bool Markdown_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"renderHtml") ) { outValue = renderHtml_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"markdownToHtml") ) { outValue = markdownToHtml_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Markdown_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Markdown_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Markdown_obj::__mClass;

static ::String Markdown_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	HX_("markdownToHtml",d5,94,c5,2d),
	HX_("renderHtml",e1,8f,20,e2),
	::String(null())
};

void Markdown_obj::__register()
{
	Markdown_obj _hx_dummy;
	Markdown_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Markdown",0f,7f,cb,68);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Markdown_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Markdown_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Markdown_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Markdown_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Markdown_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

