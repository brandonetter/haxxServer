// Generated by Haxe 4.2.1
#include <hxcpp.h>

#ifndef INCLUDED_Document
#include <Document.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Link
#include <Link.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_markdown_BlockParser
#include <markdown/BlockParser.h>
#endif
#ifndef INCLUDED_markdown_BlockSyntax
#include <markdown/BlockSyntax.h>
#endif
#ifndef INCLUDED_markdown_InlineParser
#include <markdown/InlineParser.h>
#endif
#ifndef INCLUDED_markdown_InlineSyntax
#include <markdown/InlineSyntax.h>
#endif
#ifndef INCLUDED_markdown_Node
#include <markdown/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c6dc52334d26fad1_69_new,"Document","new",0xc35605ad,"Document.new","Markdown.hx",69,0xe43b570f)
HX_LOCAL_STACK_FRAME(_hx_pos_c6dc52334d26fad1_75_parseRefLinks,"Document","parseRefLinks",0x1ed0bbc6,"Document.parseRefLinks","Markdown.hx",75,0xe43b570f)
HX_LOCAL_STACK_FRAME(_hx_pos_c6dc52334d26fad1_127_parseLines,"Document","parseLines",0xc5ede31f,"Document.parseLines","Markdown.hx",127,0xe43b570f)
HX_LOCAL_STACK_FRAME(_hx_pos_c6dc52334d26fad1_152_parseInline,"Document","parseInline",0x16d84139,"Document.parseInline","Markdown.hx",152,0xe43b570f)

void Document_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c6dc52334d26fad1_69_new)
HXLINE(  70)		this->refLinks =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  71)		this->codeBlockSyntaxes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  72)		this->inlineSyntaxes = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic Document_obj::__CreateEmpty() { return new Document_obj; }

void *Document_obj::_hx_vtable = 0;

Dynamic Document_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Document_obj > _hx_result = new Document_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Document_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2737835f;
}

void Document_obj::parseRefLinks(::Array< ::String > lines){
            	HX_GC_STACKFRAME(&_hx_pos_c6dc52334d26fad1_75_parseRefLinks)
HXLINE(  80)		::String indent = HX_("^[ ]{0,3}",e7,ad,97,1d);
HXLINE(  81)		::String id = HX_("\\[([^\\]]+)\\]",2f,43,8b,41);
HXLINE(  82)		::String quote = HX_("\"[^\"]+\"",17,1b,be,1e);
HXLINE(  83)		::String apos = HX_("'[^']+'",fc,7d,f7,f1);
HXLINE(  84)		::String paren = HX_("\\([^)]+\\)",55,44,58,f5);
HXLINE(  85)		 ::EReg titles =  ::EReg_obj::__alloc( HX_CTX ,((((((HX_("(",28,00,00,00) + quote) + HX_("|",7c,00,00,00)) + apos) + HX_("|",7c,00,00,00)) + paren) + HX_(")",29,00,00,00)),HX_("",00,00,00,00));
HXLINE(  86)		 ::EReg link =  ::EReg_obj::__alloc( HX_CTX ,(((((((((HX_("",00,00,00,00) + indent) + id) + HX_(":\\s+(\\S+)\\s*(",98,66,10,a8)) + quote) + HX_("|",7c,00,00,00)) + apos) + HX_("|",7c,00,00,00)) + paren) + HX_("|)\\s*$",be,8f,d5,6c)),HX_("",00,00,00,00));
HXLINE(  88)		{
HXLINE(  88)			int _g = 0;
HXDLIN(  88)			int _g1 = lines->length;
HXDLIN(  88)			while((_g < _g1)){
HXLINE(  88)				_g = (_g + 1);
HXDLIN(  88)				int i = (_g - 1);
HXLINE(  89)				if (!(link->match(lines->__get(i)))) {
HXLINE(  90)					continue;
            				}
HXLINE(  93)				::String id = link->matched(1);
HXLINE(  94)				::String url = link->matched(2);
HXLINE(  95)				::String title = link->matched(3);
HXLINE(  97)				bool _hx_tmp;
HXDLIN(  97)				if (::StringTools_obj::startsWith(url,HX_("<",3c,00,00,00))) {
HXLINE(  97)					_hx_tmp = ::StringTools_obj::endsWith(url,HX_(">",3e,00,00,00));
            				}
            				else {
HXLINE(  97)					_hx_tmp = false;
            				}
HXDLIN(  97)				if (_hx_tmp) {
HXLINE(  98)					url = url.substr(1,(url.length - 2));
            				}
HXLINE( 101)				bool _hx_tmp1;
HXDLIN( 101)				bool _hx_tmp2;
HXDLIN( 101)				if ((title == HX_("",00,00,00,00))) {
HXLINE( 101)					_hx_tmp2 = ::hx::IsNotNull( lines->__get((i + 1)) );
            				}
            				else {
HXLINE( 101)					_hx_tmp2 = false;
            				}
HXDLIN( 101)				if (_hx_tmp2) {
HXLINE( 101)					_hx_tmp1 = titles->match(lines->__get((i + 1)));
            				}
            				else {
HXLINE( 101)					_hx_tmp1 = false;
            				}
HXDLIN( 101)				if (_hx_tmp1) {
HXLINE( 102)					title = titles->matched(1);
HXLINE( 103)					lines[(i + 1)] = HX_("",00,00,00,00);
            				}
HXLINE( 106)				if ((title == HX_("",00,00,00,00))) {
HXLINE( 108)					title = null();
            				}
            				else {
HXLINE( 111)					title = title.substring(1,(title.length - 1));
            				}
HXLINE( 115)				id = id.toLowerCase();
HXLINE( 116)				{
HXLINE( 116)					::Dynamic this1 = this->refLinks;
HXDLIN( 116)					( ( ::haxe::ds::StringMap)(this1) )->set(id, ::Link_obj::__alloc( HX_CTX ,id,url,title));
            				}
HXLINE( 120)				lines[i] = HX_("",00,00,00,00);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Document_obj,parseRefLinks,(void))

::Array< ::Dynamic> Document_obj::parseLines(::Array< ::String > lines){
            	HX_GC_STACKFRAME(&_hx_pos_c6dc52334d26fad1_127_parseLines)
HXLINE( 128)		 ::markdown::BlockParser parser =  ::markdown::BlockParser_obj::__alloc( HX_CTX ,lines,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 129)		::Array< ::Dynamic> blocks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 131)		while((parser->pos < parser->lines->length)){
HXLINE( 132)			int _g = 0;
HXDLIN( 132)			::Array< ::Dynamic> _g1 = ::markdown::BlockSyntax_obj::get_syntaxes();
HXDLIN( 132)			while((_g < _g1->length)){
HXLINE( 132)				 ::markdown::BlockSyntax syntax = _g1->__get(_g).StaticCast<  ::markdown::BlockSyntax >();
HXDLIN( 132)				_g = (_g + 1);
HXLINE( 133)				if (syntax->canParse(parser)) {
HXLINE( 134)					::Dynamic block = syntax->parse(parser);
HXLINE( 135)					if (::hx::IsNotNull( block )) {
HXLINE( 136)						blocks->push(block);
            					}
HXLINE( 137)					goto _hx_goto_4;
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 142)		return blocks;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Document_obj,parseLines,return )

::Array< ::Dynamic> Document_obj::parseInline(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_c6dc52334d26fad1_152_parseInline)
HXDLIN( 152)		return  ::markdown::InlineParser_obj::__alloc( HX_CTX ,text,::hx::ObjectPtr<OBJ_>(this))->parse();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Document_obj,parseInline,return )


::hx::ObjectPtr< Document_obj > Document_obj::__new() {
	::hx::ObjectPtr< Document_obj > __this = new Document_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Document_obj > Document_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Document_obj *__this = (Document_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Document_obj), true, "Document"));
	*(void **)__this = Document_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Document_obj::Document_obj()
{
}

void Document_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Document);
	HX_MARK_MEMBER_NAME(refLinks,"refLinks");
	HX_MARK_MEMBER_NAME(inlineSyntaxes,"inlineSyntaxes");
	HX_MARK_MEMBER_NAME(linkResolver,"linkResolver");
	HX_MARK_MEMBER_NAME(codeBlockSyntaxes,"codeBlockSyntaxes");
	HX_MARK_END_CLASS();
}

void Document_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(refLinks,"refLinks");
	HX_VISIT_MEMBER_NAME(inlineSyntaxes,"inlineSyntaxes");
	HX_VISIT_MEMBER_NAME(linkResolver,"linkResolver");
	HX_VISIT_MEMBER_NAME(codeBlockSyntaxes,"codeBlockSyntaxes");
}

::hx::Val Document_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"refLinks") ) { return ::hx::Val( refLinks ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"parseLines") ) { return ::hx::Val( parseLines_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"parseInline") ) { return ::hx::Val( parseInline_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"linkResolver") ) { return ::hx::Val( linkResolver ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"parseRefLinks") ) { return ::hx::Val( parseRefLinks_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlineSyntaxes") ) { return ::hx::Val( inlineSyntaxes ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"codeBlockSyntaxes") ) { return ::hx::Val( codeBlockSyntaxes ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Document_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"refLinks") ) { refLinks=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"linkResolver") ) { linkResolver=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"inlineSyntaxes") ) { inlineSyntaxes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"codeBlockSyntaxes") ) { codeBlockSyntaxes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Document_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("refLinks",e6,cc,04,b1));
	outFields->push(HX_("inlineSyntaxes",0a,81,3d,7c));
	outFields->push(HX_("codeBlockSyntaxes",91,e6,94,5c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Document_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Document_obj,refLinks),HX_("refLinks",e6,cc,04,b1)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Document_obj,inlineSyntaxes),HX_("inlineSyntaxes",0a,81,3d,7c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Document_obj,linkResolver),HX_("linkResolver",20,da,44,49)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Document_obj,codeBlockSyntaxes),HX_("codeBlockSyntaxes",91,e6,94,5c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Document_obj_sStaticStorageInfo = 0;
#endif

static ::String Document_obj_sMemberFields[] = {
	HX_("refLinks",e6,cc,04,b1),
	HX_("inlineSyntaxes",0a,81,3d,7c),
	HX_("linkResolver",20,da,44,49),
	HX_("codeBlockSyntaxes",91,e6,94,5c),
	HX_("parseRefLinks",39,04,34,f6),
	HX_("parseLines",cc,24,e3,9e),
	HX_("parseInline",ec,76,7c,14),
	::String(null()) };

::hx::Class Document_obj::__mClass;

void Document_obj::__register()
{
	Document_obj _hx_dummy;
	Document_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Document",3b,ab,c4,74);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Document_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Document_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Document_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Document_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

